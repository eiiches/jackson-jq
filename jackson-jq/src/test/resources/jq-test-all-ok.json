[
    {
        "q": "true", 
        "out": [
            true
        ], 
        "in": null
    }, 
    {
        "q": "false", 
        "out": [
            false
        ], 
        "in": null
    }, 
    {
        "q": "null", 
        "out": [
            null
        ], 
        "in": 42
    }, 
    {
        "q": "1", 
        "out": [
            1
        ], 
        "in": null
    }, 
    {
        "q": "-1", 
        "out": [
            -1
        ], 
        "in": null
    }, 
    {
        "q": "{}", 
        "out": [
            {}
        ], 
        "in": null
    }, 
    {
        "q": "[]", 
        "out": [
            []
        ], 
        "in": null
    }, 
    {
        "q": "{x: -1}", 
        "out": [
            {
                "x": -1
            }
        ], 
        "in": null
    }, 
    {
        "q": ".", 
        "out": [
            "byte order mark"
        ], 
        "in": "byte order mark"
    }, 
    {
        "q": "\"Aa\\r\\n\\t\\b\\f\\u03bc\"", 
        "out": [
            "Aa\r\n\t\b\f\u03bc"
        ], 
        "in": null
    }, 
    {
        "q": ".", 
        "out": [
            "Aa\r\n\t\b\f\u03bc"
        ], 
        "in": "Aa\r\n\t\b\f\u03bc"
    }, 
    {
        "q": "\"inter\\(\"pol\" + \"ation\")\"", 
        "out": [
            "interpolation"
        ], 
        "in": null
    }, 
    {
        "q": "@text,@json,([1,.] | (@csv, @tsv)),@html,@uri,@sh,@base64", 
        "out": [
            "<>&'\"\t", 
            "\"<>&'\\\"\\t\"", 
            "1,\"<>&'\"\"\t\"", 
            "1\t<>&'\"\\t", 
            "&lt;&gt;&amp;&apos;&quot;\t", 
            "%3C%3E%26'%22%09", 
            "'<>&'\\''\"\t'", 
            "PD4mJyIJ"
        ], 
        "in": "<>&'\"\t"
    }, 
    {
        "q": "@base64", 
        "out": [
            "Zm/Ds2Jhcgo="
        ], 
        "in": "fo\u00f3bar\n"
    }, 
    {
        "q": "@uri", 
        "out": [
            "%CE%BC"
        ], 
        "in": "\u03bc"
    }, 
    {
        "q": "@html \"<b>\\(.)</b>\"", 
        "out": [
            "<b>&lt;script&gt;hax&lt;/script&gt;</b>"
        ], 
        "in": "<script>hax</script>"
    }, 
    {
        "q": "[.[]|tojson|fromjson]", 
        "out": [
            [
                "foo", 
                1, 
                [
                    "a", 
                    1, 
                    "b", 
                    2, 
                    {
                        "foo": "bar"
                    }
                ]
            ]
        ], 
        "in": [
            "foo", 
            1, 
            [
                "a", 
                1, 
                "b", 
                2, 
                {
                    "foo": "bar"
                }
            ]
        ]
    }, 
    {
        "q": "{a: 1}", 
        "out": [
            {
                "a": 1
            }
        ], 
        "in": null
    }, 
    {
        "q": "{a,b,(.d):.a,e:.b}", 
        "out": [
            {
                "a": 1, 
                "c": 1, 
                "b": 2, 
                "e": 2
            }
        ], 
        "in": {
            "a": 1, 
            "c": 3, 
            "b": 2, 
            "d": "c"
        }
    }, 
    {
        "q": "{\"a\",b,\"a$\\(1+1)\"}", 
        "out": [
            {
                "a": 1, 
                "b": 2, 
                "a$2": 4
            }
        ], 
        "in": {
            "a": 1, 
            "c": 3, 
            "b": 2, 
            "a$2": 4
        }
    }, 
    {
        "q": ".foo", 
        "out": [
            42
        ], 
        "in": {
            "foo": 42, 
            "bar": 43
        }
    }, 
    {
        "q": ".foo | .bar", 
        "out": [
            42
        ], 
        "in": {
            "foo": {
                "bar": 42
            }, 
            "bar": "badvalue"
        }
    }, 
    {
        "q": ".foo.bar", 
        "out": [
            42
        ], 
        "in": {
            "foo": {
                "bar": 42
            }, 
            "bar": "badvalue"
        }
    }, 
    {
        "q": ".foo_bar", 
        "out": [
            2
        ], 
        "in": {
            "foo_bar": 2
        }
    }, 
    {
        "q": ".[\"foo\"].bar", 
        "out": [
            42
        ], 
        "in": {
            "foo": {
                "bar": 42
            }, 
            "bar": "badvalue"
        }
    }, 
    {
        "q": ".\"foo\".\"bar\"", 
        "out": [
            20
        ], 
        "in": {
            "foo": {
                "bar": 20
            }
        }
    }, 
    {
        "q": "[.[]|.foo?]", 
        "out": [
            [
                3, 
                null, 
                5
            ]
        ], 
        "in": [
            1, 
            [
                2
            ], 
            {
                "foo": 3, 
                "bar": 4
            }, 
            {}, 
            {
                "foo": 5
            }
        ]
    }, 
    {
        "q": "[.[]|.foo?.bar?]", 
        "out": [
            [
                4, 
                null
            ]
        ], 
        "in": [
            1, 
            [
                2
            ], 
            [], 
            {
                "foo": 3
            }, 
            {
                "foo": {
                    "bar": 4
                }
            }, 
            {}
        ]
    }, 
    {
        "q": "[..]", 
        "out": [
            [
                [
                    1, 
                    [
                        [
                            2
                        ]
                    ], 
                    {
                        "a": [
                            1
                        ]
                    }
                ], 
                1, 
                [
                    [
                        2
                    ]
                ], 
                [
                    2
                ], 
                2, 
                {
                    "a": [
                        1
                    ]
                }, 
                [
                    1
                ], 
                1
            ]
        ], 
        "in": [
            1, 
            [
                [
                    2
                ]
            ], 
            {
                "a": [
                    1
                ]
            }
        ]
    }, 
    {
        "q": "[.[]|.[]?]", 
        "out": [
            [
                1, 
                [
                    2, 
                    [
                        [
                            3
                        ]
                    ]
                ], 
                {}, 
                {
                    "a": [
                        1, 
                        [
                            2
                        ]
                    ]
                }
            ]
        ], 
        "in": [
            1, 
            null, 
            [], 
            [
                1, 
                [
                    2, 
                    [
                        [
                            3
                        ]
                    ]
                ]
            ], 
            [
                {}
            ], 
            [
                {
                    "a": [
                        1, 
                        [
                            2
                        ]
                    ]
                }
            ]
        ]
    }, 
    {
        "q": "[.[]|.[1:3]?]", 
        "out": [
            [
                null, 
                "bc", 
                [], 
                [
                    2, 
                    3
                ], 
                [
                    2
                ]
            ]
        ], 
        "in": [
            1, 
            null, 
            true, 
            false, 
            "abcdef", 
            {}, 
            {
                "a": 1, 
                "b": 2
            }, 
            [], 
            [
                1, 
                2, 
                3, 
                4, 
                5
            ], 
            [
                1, 
                2
            ]
        ]
    }, 
    {
        "q": "try (.foo[-1] = 0) catch .", 
        "out": [
            "Out of bounds negative array index"
        ], 
        "in": null
    }, 
    {
        "q": "try (.foo[-2] = 0) catch .", 
        "out": [
            "Out of bounds negative array index"
        ], 
        "in": null
    }, 
    {
        "q": ".[-1] = 5", 
        "out": [
            [
                0, 
                1, 
                5
            ]
        ], 
        "in": [
            0, 
            1, 
            2
        ]
    }, 
    {
        "q": ".[-2] = 5", 
        "out": [
            [
                0, 
                5, 
                2
            ]
        ], 
        "in": [
            0, 
            1, 
            2
        ]
    }, 
    {
        "q": ".[]", 
        "out": [
            1, 
            2, 
            3
        ], 
        "in": [
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "1,1", 
        "out": [
            1, 
            1
        ], 
        "in": []
    }, 
    {
        "q": "1,.", 
        "out": [
            1, 
            []
        ], 
        "in": []
    }, 
    {
        "q": "[.]", 
        "out": [
            [
                [
                    2
                ]
            ]
        ], 
        "in": [
            2
        ]
    }, 
    {
        "q": "[[2]]", 
        "out": [
            [
                [
                    2
                ]
            ]
        ], 
        "in": [
            3
        ]
    }, 
    {
        "q": "[{}]", 
        "out": [
            [
                {}
            ]
        ], 
        "in": [
            2
        ]
    }, 
    {
        "q": "[.[]]", 
        "out": [
            [
                "a"
            ]
        ], 
        "in": [
            "a"
        ]
    }, 
    {
        "q": "[(.,1),((.,.[]),(2,3))]", 
        "out": [
            [
                [
                    "a", 
                    "b"
                ], 
                1, 
                [
                    "a", 
                    "b"
                ], 
                "a", 
                "b", 
                2, 
                3
            ]
        ], 
        "in": [
            "a", 
            "b"
        ]
    }, 
    {
        "q": "[([5,5][]),.,.[]]", 
        "out": [
            [
                5, 
                5, 
                [
                    1, 
                    2, 
                    3
                ], 
                1, 
                2, 
                3
            ]
        ], 
        "in": [
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "{x: (1,2)},{x:3} | .x", 
        "out": [
            1, 
            2, 
            3
        ], 
        "in": null
    }, 
    {
        "q": ".[-2]", 
        "out": [
            2
        ], 
        "in": [
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "[range(0;10)]", 
        "out": [
            [
                0, 
                1, 
                2, 
                3, 
                4, 
                5, 
                6, 
                7, 
                8, 
                9
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[range(0,1;3,4)]", 
        "out": [
            [
                0, 
                1, 
                2, 
                0, 
                1, 
                2, 
                3, 
                1, 
                2, 
                1, 
                2, 
                3
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[range(0;10;3)]", 
        "out": [
            [
                0, 
                3, 
                6, 
                9
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[range(0;10;-1)]", 
        "out": [
            []
        ], 
        "in": null
    }, 
    {
        "q": "[range(0;-5;-1)]", 
        "out": [
            [
                0, 
                -1, 
                -2, 
                -3, 
                -4
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[range(0,1;4,5;1,2)]", 
        "out": [
            [
                0, 
                1, 
                2, 
                3, 
                0, 
                2, 
                0, 
                1, 
                2, 
                3, 
                4, 
                0, 
                2, 
                4, 
                1, 
                2, 
                3, 
                1, 
                3, 
                1, 
                2, 
                3, 
                4, 
                1, 
                3
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[while(.<100; .*2)]", 
        "out": [
            [
                1, 
                2, 
                4, 
                8, 
                16, 
                32, 
                64
            ]
        ], 
        "in": 1
    }, 
    {
        "q": "[.[]|[.,1]|until(.[0] < 1; [.[0] - 1, .[1] * .[0]])|.[1]]", 
        "out": [
            [
                1, 
                2, 
                6, 
                24, 
                120
            ]
        ], 
        "in": [
            1, 
            2, 
            3, 
            4, 
            5
        ]
    }, 
    {
        "q": "[foreach range(5) as $item (0; $item)]", 
        "out": [
            [
                0, 
                1, 
                2, 
                3, 
                4
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[limit(3; .[])]", 
        "out": [
            [
                11, 
                22, 
                33
            ]
        ], 
        "in": [
            11, 
            22, 
            33, 
            44, 
            55, 
            66, 
            77, 
            88, 
            99
        ]
    }, 
    {
        "q": "[first(range(.)), last(range(.)), nth(0; range(.)), nth(5; range(.)), try nth(-1; range(.)) catch .]", 
        "out": [
            [
                0, 
                9, 
                0, 
                5, 
                "nth doesn't support negative indices"
            ]
        ], 
        "in": 10
    }, 
    {
        "q": "[limit(5,7; range(9))]", 
        "out": [
            [
                0, 
                1, 
                2, 
                3, 
                4, 
                0, 
                1, 
                2, 
                3, 
                4, 
                5, 
                6
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[nth(5,7; range(9;0;-1))]", 
        "out": [
            [
                4, 
                2
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[range(0,1,2;4,3,2;2,3)]", 
        "out": [
            [
                0, 
                2, 
                0, 
                3, 
                0, 
                2, 
                0, 
                0, 
                0, 
                1, 
                3, 
                1, 
                1, 
                1, 
                1, 
                1, 
                2, 
                2, 
                2, 
                2
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[range(3,5)]", 
        "out": [
            [
                0, 
                1, 
                2, 
                0, 
                1, 
                2, 
                3, 
                4
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[(index(\",\",\"|\"), rindex(\",\",\"|\")), indices(\",\",\"|\")]", 
        "out": [
            [
                1, 
                3, 
                22, 
                19, 
                [
                    1, 
                    5, 
                    7, 
                    12, 
                    14, 
                    16, 
                    18, 
                    20, 
                    22
                ], 
                [
                    3, 
                    9, 
                    10, 
                    17, 
                    19
                ]
            ]
        ], 
        "in": "a,b|c,d,e||f,g,h,|,|,i,j"
    }, 
    {
        "q": "join(\",\",\"/\")", 
        "out": [
            "a,b,c,d", 
            "a/b/c/d"
        ], 
        "in": [
            "a", 
            "b", 
            "c", 
            "d"
        ]
    }, 
    {
        "q": "[.[]|join(\"a\")]", 
        "out": [
            [
                "", 
                "", 
                "a", 
                "aa"
            ]
        ], 
        "in": [
            [], 
            [
                ""
            ], 
            [
                "", 
                ""
            ], 
            [
                "", 
                "", 
                ""
            ]
        ]
    }, 
    {
        "q": "flatten(3,2,1)", 
        "out": [
            [
                0, 
                1, 
                2, 
                3
            ], 
            [
                0, 
                1, 
                2, 
                [
                    3
                ]
            ], 
            [
                0, 
                1, 
                [
                    2
                ], 
                [
                    [
                        3
                    ]
                ]
            ]
        ], 
        "in": [
            0, 
            [
                1
            ], 
            [
                [
                    2
                ]
            ], 
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ]
    }, 
    {
        "q": "[.[3:2], .[-5:4], .[:-2], .[-2:], .[3:3][1:], .[10:]]", 
        "out": [
            [
                [], 
                [
                    2, 
                    3
                ], 
                [
                    0, 
                    1, 
                    2, 
                    3, 
                    4
                ], 
                [
                    5, 
                    6
                ], 
                [], 
                []
            ]
        ], 
        "in": [
            0, 
            1, 
            2, 
            3, 
            4, 
            5, 
            6
        ]
    }, 
    {
        "q": "[.[3:2], .[-5:4], .[:-2], .[-2:], .[3:3][1:], .[10:]]", 
        "out": [
            [
                "", 
                "", 
                "abcdefg", 
                "hi", 
                "", 
                ""
            ]
        ], 
        "in": "abcdefghi"
    }, 
    {
        "q": ".[2:4] = ([], [\"a\",\"b\"], [\"a\",\"b\",\"c\"])", 
        "out": [
            [
                0, 
                1, 
                4, 
                5, 
                6, 
                7
            ], 
            [
                0, 
                1, 
                "a", 
                "b", 
                4, 
                5, 
                6, 
                7
            ], 
            [
                0, 
                1, 
                "a", 
                "b", 
                "c", 
                4, 
                5, 
                6, 
                7
            ]
        ], 
        "in": [
            0, 
            1, 
            2, 
            3, 
            4, 
            5, 
            6, 
            7
        ]
    }, 
    {
        "q": "1 as $x | 2 as $y | [$x,$y,$x]", 
        "out": [
            [
                1, 
                2, 
                1
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[1,2,3][] as $x | [[4,5,6,7][$x]]", 
        "out": [
            [
                5
            ], 
            [
                6
            ], 
            [
                7
            ]
        ], 
        "in": null
    }, 
    {
        "q": "42 as $x | . | . | . + 432 | $x + 1", 
        "out": [
            43
        ], 
        "in": 34324
    }, 
    {
        "q": "1 as $x | [$x,$x,$x as $x | $x]", 
        "out": [
            [
                1, 
                1, 
                1
            ]
        ], 
        "in": null
    }, 
    {
        "q": "1+1", 
        "out": [
            2
        ], 
        "in": null
    }, 
    {
        "q": "1+1", 
        "out": [
            2.0
        ], 
        "in": "wtasdf"
    }, 
    {
        "q": "2-1", 
        "out": [
            1
        ], 
        "in": null
    }, 
    {
        "q": "2-(-1)", 
        "out": [
            3
        ], 
        "in": null
    }, 
    {
        "q": "1e+0+0.001e3", 
        "out": [
            2.0
        ], 
        "in": "I wonder what this will be?"
    }, 
    {
        "q": ".+4", 
        "out": [
            19.0
        ], 
        "in": 15
    }, 
    {
        "q": ".+null", 
        "out": [
            {
                "a": 42
            }
        ], 
        "in": {
            "a": 42
        }
    }, 
    {
        "q": "null+.", 
        "out": [
            null
        ], 
        "in": null
    }, 
    {
        "q": ".a+.b", 
        "out": [
            42
        ], 
        "in": {
            "a": 42
        }
    }, 
    {
        "q": "[1,2,3] + [.]", 
        "out": [
            [
                1, 
                2, 
                3, 
                null
            ]
        ], 
        "in": null
    }, 
    {
        "q": "{\"a\":1} + {\"b\":2} + {\"c\":3}", 
        "out": [
            {
                "a": 1, 
                "c": 3, 
                "b": 2
            }
        ], 
        "in": "asdfasdf"
    }, 
    {
        "q": "\"asdf\" + \"jkl;\" + . + . + .", 
        "out": [
            "asdfjkl;some stringsome stringsome string"
        ], 
        "in": "some string"
    }, 
    {
        "q": "\"\\u0000\\u0020\\u0000\" + .", 
        "out": [
            "\u0000 \u0000\u0000 \u0000"
        ], 
        "in": "\u0000 \u0000"
    }, 
    {
        "q": "42 - .", 
        "out": [
            31
        ], 
        "in": 11
    }, 
    {
        "q": "[1,2,3,4,1] - [.,3]", 
        "out": [
            [
                2, 
                4
            ]
        ], 
        "in": 1
    }, 
    {
        "q": "[10 * 20, 20 / .]", 
        "out": [
            [
                200, 
                5
            ]
        ], 
        "in": 4
    }, 
    {
        "q": "1 + 2 * 2 + 10 / 2", 
        "out": [
            10
        ], 
        "in": null
    }, 
    {
        "q": "[16 / 4 / 2, 16 / 4 * 2, 16 - 4 - 2, 16 - 4 + 2]", 
        "out": [
            [
                2, 
                8, 
                10, 
                14
            ]
        ], 
        "in": null
    }, 
    {
        "q": "25 % 7", 
        "out": [
            4
        ], 
        "in": null
    }, 
    {
        "q": "49732 % 472", 
        "out": [
            172
        ], 
        "in": null
    }, 
    {
        "q": "1 + tonumber + (\"10\" | tonumber)", 
        "out": [
            15
        ], 
        "in": 4
    }, 
    {
        "q": "[{\"a\":42},.object,10,.num,false,true,null,\"b\",[1,4]] | .[] as $x | [$x == .[]]", 
        "out": [
            [
                true, 
                true, 
                false, 
                false, 
                false, 
                false, 
                false, 
                false, 
                false
            ], 
            [
                true, 
                true, 
                false, 
                false, 
                false, 
                false, 
                false, 
                false, 
                false
            ], 
            [
                false, 
                false, 
                true, 
                true, 
                false, 
                false, 
                false, 
                false, 
                false
            ], 
            [
                false, 
                false, 
                true, 
                true, 
                false, 
                false, 
                false, 
                false, 
                false
            ], 
            [
                false, 
                false, 
                false, 
                false, 
                true, 
                false, 
                false, 
                false, 
                false
            ], 
            [
                false, 
                false, 
                false, 
                false, 
                false, 
                true, 
                false, 
                false, 
                false
            ], 
            [
                false, 
                false, 
                false, 
                false, 
                false, 
                false, 
                true, 
                false, 
                false
            ], 
            [
                false, 
                false, 
                false, 
                false, 
                false, 
                false, 
                false, 
                true, 
                false
            ], 
            [
                false, 
                false, 
                false, 
                false, 
                false, 
                false, 
                false, 
                false, 
                true
            ]
        ], 
        "in": {
            "object": {
                "a": 42
            }, 
            "num": 10.0
        }
    }, 
    {
        "q": "[.[] | length]", 
        "out": [
            [
                0, 
                0, 
                2, 
                1, 
                4, 
                1
            ]
        ], 
        "in": [
            [], 
            {}, 
            [
                1, 
                2
            ], 
            {
                "a": 42
            }, 
            "asdf", 
            "\u03bc"
        ]
    }, 
    {
        "q": "utf8bytelength", 
        "out": [
            6
        ], 
        "in": "asdf\u03bc"
    }, 
    {
        "q": "[.[] | try utf8bytelength catch .]", 
        "out": [
            [
                "array ([]) only strings have UTF-8 byte length", 
                "object ({}) only strings have UTF-8 byte length", 
                "array ([1,2]) only strings have UTF-8 byte length", 
                "number (55) only strings have UTF-8 byte length", 
                "boolean (true) only strings have UTF-8 byte length", 
                "boolean (false) only strings have UTF-8 byte length"
            ]
        ], 
        "in": [
            [], 
            {}, 
            [
                1, 
                2
            ], 
            55, 
            true, 
            false
        ]
    }, 
    {
        "q": "map(keys)", 
        "out": [
            [
                [], 
                [
                    "abc", 
                    "abcd", 
                    "abcde"
                ], 
                [
                    "x", 
                    "y", 
                    "z"
                ]
            ]
        ], 
        "in": [
            {}, 
            {
                "abcd": 1, 
                "abc": 2, 
                "abcde": 3
            }, 
            {
                "y": 2, 
                "x": 1, 
                "z": 3
            }
        ]
    }, 
    {
        "q": "[1,2,empty,3,empty,4]", 
        "out": [
            [
                1, 
                2, 
                3, 
                4
            ]
        ], 
        "in": null
    }, 
    {
        "q": "map(add)", 
        "out": [
            [
                null, 
                6, 
                "abc", 
                [
                    3, 
                    4, 
                    5, 
                    6
                ], 
                {
                    "a": 3, 
                    "b": 2
                }
            ]
        ], 
        "in": [
            [], 
            [
                1, 
                2, 
                3
            ], 
            [
                "a", 
                "b", 
                "c"
            ], 
            [
                [
                    3
                ], 
                [
                    4, 
                    5
                ], 
                [
                    6
                ]
            ], 
            [
                {
                    "a": 1
                }, 
                {
                    "b": 2
                }, 
                {
                    "a": 3
                }
            ]
        ]
    }, 
    {
        "q": "def f: . + 1; def g: def g: . + 100; f | g | f; (f | g), g", 
        "out": [
            106.0, 
            105.0
        ], 
        "in": 3.0
    }, 
    {
        "q": "def f: (1000,2000); f", 
        "out": [
            1000, 
            2000
        ], 
        "in": 123412345
    }, 
    {
        "q": "def f(a;b;c;d;e;f): [a+1,b,c,d,e,f]; f(.[0];.[1];.[0];.[0];.[0];.[0])", 
        "out": [
            [
                2, 
                2, 
                1, 
                1, 
                1, 
                1
            ]
        ], 
        "in": [
            1, 
            2
        ]
    }, 
    {
        "q": "def a: 0; . | a", 
        "out": [
            0
        ], 
        "in": null
    }, 
    {
        "q": "def f(a;b;c;d;e;f;g;h;i;j): [j,i,h,g,f,e,d,c,b,a]; f(.[0];.[1];.[2];.[3];.[4];.[5];.[6];.[7];.[8];.[9])", 
        "out": [
            [
                9, 
                8, 
                7, 
                6, 
                5, 
                4, 
                3, 
                2, 
                1, 
                0
            ]
        ], 
        "in": [
            0, 
            1, 
            2, 
            3, 
            4, 
            5, 
            6, 
            7, 
            8, 
            9
        ]
    }, 
    {
        "q": "([1,2] + [4,5])", 
        "out": [
            [
                1, 
                2, 
                4, 
                5
            ]
        ], 
        "in": [
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "true", 
        "out": [
            true
        ], 
        "in": [
            1
        ]
    }, 
    {
        "q": "null,1,null", 
        "out": [
            null, 
            1, 
            null
        ], 
        "in": "hello"
    }, 
    {
        "q": "[1,2,3]", 
        "out": [
            [
                1, 
                2, 
                3
            ]
        ], 
        "in": [
            5, 
            6
        ]
    }, 
    {
        "q": "[.[]|floor]", 
        "out": [
            [
                -2, 
                1, 
                1
            ]
        ], 
        "in": [
            -1.1, 
            1.1, 
            1.9
        ]
    }, 
    {
        "q": "[.[]|sqrt]", 
        "out": [
            [
                2, 
                3
            ]
        ], 
        "in": [
            4, 
            9
        ]
    }, 
    {
        "q": "(add / length) as $m | map((. - $m) as $d | $d * $d) | add / length | sqrt", 
        "out": [
            2
        ], 
        "in": [
            2, 
            4, 
            4, 
            4, 
            5, 
            5, 
            7, 
            9
        ]
    }, 
    {
        "q": "atan * 4 * 1000000|floor / 1000000", 
        "out": [
            3.141592
        ], 
        "in": 1
    }, 
    {
        "q": "[(3.141592 / 2) * (range(0;20) / 20)|cos * 1000000|floor / 1000000]", 
        "out": [
            [
                1, 
                0.996917, 
                0.987688, 
                0.972369, 
                0.951056, 
                0.923879, 
                0.891006, 
                0.85264, 
                0.809017, 
                0.760406, 
                0.707106, 
                0.649448, 
                0.587785, 
                0.522498, 
                0.45399, 
                0.382683, 
                0.309017, 
                0.233445, 
                0.156434, 
                0.078459
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[(3.141592 / 2) * (range(0;20) / 20)|sin * 1000000|floor / 1000000]", 
        "out": [
            [
                0, 
                0.078459, 
                0.156434, 
                0.233445, 
                0.309016, 
                0.382683, 
                0.45399, 
                0.522498, 
                0.587785, 
                0.649447, 
                0.707106, 
                0.760405, 
                0.809016, 
                0.85264, 
                0.891006, 
                0.923879, 
                0.951056, 
                0.972369, 
                0.987688, 
                0.996917
            ]
        ], 
        "in": null
    }, 
    {
        "q": "def f(x): x | x; f([.], . + [42])", 
        "out": [
            [
                [
                    [
                        1, 
                        2, 
                        3
                    ]
                ]
            ], 
            [
                [
                    1, 
                    2, 
                    3
                ], 
                42
            ], 
            [
                [
                    1, 
                    2, 
                    3, 
                    42
                ]
            ], 
            [
                1, 
                2, 
                3, 
                42, 
                42
            ]
        ], 
        "in": [
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "def id(x):x; 2000 as $x | def f(x):1 as $x | id([$x, x, x]); def g(x): 100 as $x | f($x,$x+x); g($x)", 
        "out": [
            [
                1, 
                100, 
                2100.0, 
                100, 
                2100.0
            ]
        ], 
        "in": "more testing"
    }, 
    {
        "q": "def x(a;b): a as $a | b as $b | $a + $b; def y($a;$b): $a + $b; def check(a;b): [x(a;b)] == [y(a;b)]; check(.[];.[]*2)", 
        "out": [
            true
        ], 
        "in": [
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "[[20,10][1,0] as $x | def f: (100,200) as $y | def g: [$x + $y, .]; . + $x | g; f[0] | [f][0][1] | f]", 
        "out": [
            [
                [
                    110.0, 
                    130.0
                ], 
                [
                    210.0, 
                    130.0
                ], 
                [
                    110.0, 
                    230.0
                ], 
                [
                    210.0, 
                    230.0
                ], 
                [
                    120.0, 
                    160.0
                ], 
                [
                    220.0, 
                    160.0
                ], 
                [
                    120.0, 
                    260.0
                ], 
                [
                    220.0, 
                    260.0
                ]
            ]
        ], 
        "in": 999999999
    }, 
    {
        "q": "def fac: if . == 1 then 1 else . * (. - 1 | fac) end; [.[] | fac]", 
        "out": [
            [
                1, 
                2, 
                6, 
                24
            ]
        ], 
        "in": [
            1, 
            2, 
            3, 
            4
        ]
    }, 
    {
        "q": "reduce .[] as $x (0; . + $x)", 
        "out": [
            7
        ], 
        "in": [
            1, 
            2, 
            4
        ]
    }, 
    {
        "q": ". as $dot|any($dot[];not)", 
        "out": [
            true
        ], 
        "in": [
            1, 
            2, 
            3, 
            4, 
            true, 
            false, 
            1, 
            2, 
            3, 
            4, 
            5
        ]
    }, 
    {
        "q": ". as $dot|any($dot[];not)", 
        "out": [
            false
        ], 
        "in": [
            1, 
            2, 
            3, 
            4, 
            true
        ]
    }, 
    {
        "q": ". as $dot|all($dot[];.)", 
        "out": [
            false
        ], 
        "in": [
            1, 
            2, 
            3, 
            4, 
            true, 
            false, 
            1, 
            2, 
            3, 
            4, 
            5
        ]
    }, 
    {
        "q": ". as $dot|all($dot[];.)", 
        "out": [
            true
        ], 
        "in": [
            1, 
            2, 
            3, 
            4, 
            true
        ]
    }, 
    {
        "q": "try path(.a | map(select(.b == 0))) catch .", 
        "out": [
            "Invalid path expression with result [{\"b\":0}]"
        ], 
        "in": {
            "a": [
                {
                    "b": 0
                }
            ]
        }
    }, 
    {
        "q": "try path(.a | map(select(.b == 0)) | .[0]) catch .", 
        "out": [
            "Invalid path expression near attempt to access element 0 of [{\"b\":0}]"
        ], 
        "in": {
            "a": [
                {
                    "b": 0
                }
            ]
        }
    }, 
    {
        "q": "try path(.a | map(select(.b == 0)) | .c) catch .", 
        "out": [
            "Invalid path expression near attempt to access element \"c\" of [{\"b\":0}]"
        ], 
        "in": {
            "a": [
                {
                    "b": 0
                }
            ]
        }
    }, 
    {
        "q": "try path(.a | map(select(.b == 0)) | .[]) catch .", 
        "out": [
            "Invalid path expression near attempt to iterate through [{\"b\":0}]"
        ], 
        "in": {
            "a": [
                {
                    "b": 0
                }
            ]
        }
    }, 
    {
        "q": "path(.a[path(.b)[0]])", 
        "out": [
            [
                "a", 
                "b"
            ]
        ], 
        "in": {
            "a": {
                "b": 0
            }
        }
    }, 
    {
        "q": "[paths]", 
        "out": [
            [
                [
                    0
                ], 
                [
                    1
                ], 
                [
                    1, 
                    0
                ], 
                [
                    1, 
                    1
                ], 
                [
                    1, 
                    1, 
                    "a"
                ]
            ]
        ], 
        "in": [
            1, 
            [
                [], 
                {
                    "a": 2
                }
            ]
        ]
    }, 
    {
        "q": "[leaf_paths]", 
        "out": [
            [
                [
                    0
                ], 
                [
                    1, 
                    1, 
                    "a"
                ]
            ]
        ], 
        "in": [
            1, 
            [
                [], 
                {
                    "a": 2
                }
            ]
        ]
    }, 
    {
        "q": "try delpaths(0) catch .", 
        "out": [
            "Paths must be specified as an array"
        ], 
        "in": {}
    }, 
    {
        "q": "del(.[1], .[-6], .[2], .[-3:9])", 
        "out": [
            [
                0, 
                3, 
                5, 
                6, 
                9
            ]
        ], 
        "in": [
            0, 
            1, 
            2, 
            3, 
            4, 
            5, 
            6, 
            7, 
            8, 
            9
        ]
    }, 
    {
        "q": ".message = \"goodbye\"", 
        "out": [
            {
                "message": "goodbye"
            }
        ], 
        "in": {
            "message": "hello"
        }
    }, 
    {
        "q": ".foo = .bar", 
        "out": [
            {
                "foo": 42, 
                "bar": 42
            }
        ], 
        "in": {
            "bar": 42
        }
    }, 
    {
        "q": ".foo |= .+1", 
        "out": [
            {
                "foo": 43
            }
        ], 
        "in": {
            "foo": 42
        }
    }, 
    {
        "q": ".[] += 2, .[] *= 2, .[] -= 2, .[] /= 2, .[] %=2", 
        "out": [
            [
                3, 
                5, 
                7
            ], 
            [
                2, 
                6, 
                10
            ], 
            [
                -1, 
                1, 
                3
            ], 
            [
                0.5, 
                1.5, 
                2.5
            ], 
            [
                1, 
                1, 
                1
            ]
        ], 
        "in": [
            1, 
            3, 
            5
        ]
    }, 
    {
        "q": "[.[] % 7]", 
        "out": [
            [
                0, 
                -6, 
                -5, 
                -4, 
                -3, 
                -2, 
                -1, 
                0, 
                1, 
                2, 
                3, 
                4, 
                5, 
                6, 
                0
            ]
        ], 
        "in": [
            -7, 
            -6, 
            -5, 
            -4, 
            -3, 
            -2, 
            -1, 
            0, 
            1, 
            2, 
            3, 
            4, 
            5, 
            6, 
            7
        ]
    }, 
    {
        "q": ".foo += .foo", 
        "out": [
            {
                "foo": 4
            }
        ], 
        "in": {
            "foo": 2
        }
    }, 
    {
        "q": ".[0].a |= {\"old\":., \"new\":(.+1)}", 
        "out": [
            [
                {
                    "a": {
                        "new": 2, 
                        "old": 1
                    }, 
                    "b": 2
                }
            ]
        ], 
        "in": [
            {
                "a": 1, 
                "b": 2
            }
        ]
    }, 
    {
        "q": ".[2][3] = 1", 
        "out": [
            [
                4, 
                null, 
                [
                    null, 
                    null, 
                    null, 
                    1
                ]
            ]
        ], 
        "in": [
            4
        ]
    }, 
    {
        "q": ".foo[2].bar = 1", 
        "out": [
            {
                "foo": [
                    11, 
                    null, 
                    {
                        "bar": 1
                    }
                ], 
                "bar": 42
            }
        ], 
        "in": {
            "foo": [
                11
            ], 
            "bar": 42
        }
    }, 
    {
        "q": "try ((map(select(.a == 1))[].b) = 10) catch .", 
        "out": [
            "Invalid path expression near attempt to iterate through [{\"a\":1}]"
        ], 
        "in": [
            {
                "a": 0
            }, 
            {
                "a": 1
            }
        ]
    }, 
    {
        "q": "try ((map(select(.a == 1))[].a) |= .+1) catch .", 
        "out": [
            "Invalid path expression near attempt to iterate through [{\"a\":1}]"
        ], 
        "in": [
            {
                "a": 0
            }, 
            {
                "a": 1
            }
        ]
    }, 
    {
        "q": "def x: .[1,2]; x=10", 
        "out": [
            [
                0, 
                10, 
                10
            ]
        ], 
        "in": [
            0, 
            1, 
            2
        ]
    }, 
    {
        "q": "try (def x: reverse; x=10) catch .", 
        "out": [
            "Invalid path expression with result [2,1,0]"
        ], 
        "in": [
            0, 
            1, 
            2
        ]
    }, 
    {
        "q": ".[] = 1", 
        "out": [], 
        "in": [
            0, 
            1, 
            2
        ]
    }, 
    {
        "q": "[.[] | if .foo then \"yep\" else \"nope\" end]", 
        "out": [
            [
                "yep", 
                "yep", 
                "yep", 
                "yep", 
                "nope", 
                "nope", 
                "yep", 
                "nope"
            ]
        ], 
        "in": [
            {
                "foo": 0
            }, 
            {
                "foo": 1
            }, 
            {
                "foo": []
            }, 
            {
                "foo": true
            }, 
            {
                "foo": false
            }, 
            {
                "foo": null
            }, 
            {
                "foo": "foo"
            }, 
            {}
        ]
    }, 
    {
        "q": "[.[] | if .baz then \"strange\" elif .foo then \"yep\" else \"nope\" end]", 
        "out": [
            [
                "yep", 
                "yep", 
                "yep", 
                "yep", 
                "nope", 
                "nope", 
                "yep", 
                "nope"
            ]
        ], 
        "in": [
            {
                "foo": 0
            }, 
            {
                "foo": 1
            }, 
            {
                "foo": []
            }, 
            {
                "foo": true
            }, 
            {
                "foo": false
            }, 
            {
                "foo": null
            }, 
            {
                "foo": "foo"
            }, 
            {}
        ]
    }, 
    {
        "q": "[if 1,null,2 then 3 else 4 end]", 
        "out": [
            [
                3, 
                4, 
                3
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[if empty then 3 else 4 end]", 
        "out": [
            []
        ], 
        "in": null
    }, 
    {
        "q": "[if 1 then 3,4 else 5 end]", 
        "out": [
            [
                3, 
                4
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[if null then 3 else 5,6 end]", 
        "out": [
            [
                5, 
                6
            ]
        ], 
        "in": null
    }, 
    {
        "q": "[.[] | [.foo[] // .bar]]", 
        "out": [
            [
                [
                    1, 
                    2
                ], 
                [
                    1
                ], 
                [
                    3
                ], 
                [
                    42
                ], 
                [
                    41
                ]
            ]
        ], 
        "in": [
            {
                "foo": [
                    1, 
                    2
                ], 
                "bar": 42
            }, 
            {
                "foo": [
                    1
                ], 
                "bar": null
            }, 
            {
                "foo": [
                    null, 
                    false, 
                    3
                ], 
                "bar": 18
            }, 
            {
                "foo": [], 
                "bar": 42
            }, 
            {
                "foo": [
                    null, 
                    false, 
                    null
                ], 
                "bar": 41
            }
        ]
    }, 
    {
        "q": ".[] //= .[0]", 
        "out": [
            [
                "hello", 
                true, 
                "hello", 
                [
                    false
                ], 
                "hello"
            ]
        ], 
        "in": [
            "hello", 
            true, 
            false, 
            [
                false
            ], 
            null
        ]
    }, 
    {
        "q": ".[] | [.[0] and .[1], .[0] or .[1]]", 
        "out": [
            [
                true, 
                true
            ], 
            [
                false, 
                true
            ], 
            [
                false, 
                true
            ], 
            [
                false, 
                false
            ]
        ], 
        "in": [
            [
                true, 
                []
            ], 
            [
                false, 
                1
            ], 
            [
                42, 
                null
            ], 
            [
                null, 
                false
            ]
        ]
    }, 
    {
        "q": "[.[] | not]", 
        "out": [
            [
                false, 
                false, 
                true, 
                true, 
                false, 
                false
            ]
        ], 
        "in": [
            1, 
            0, 
            false, 
            null, 
            true, 
            "hello"
        ]
    }, 
    {
        "q": "[10 > 0, 10 > 10, 10 > 20, 10 < 0, 10 < 10, 10 < 20]", 
        "out": [
            [
                true, 
                false, 
                false, 
                false, 
                false, 
                true
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "[10 >= 0, 10 >= 10, 10 >= 20, 10 <= 0, 10 <= 10, 10 <= 20]", 
        "out": [
            [
                true, 
                true, 
                false, 
                false, 
                true, 
                true
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "[ 10 == 10, 10 != 10, 10 != 11, 10 == 11]", 
        "out": [
            [
                true, 
                false, 
                true, 
                false
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "[\"hello\" == \"hello\", \"hello\" != \"hello\", \"hello\" == \"world\", \"hello\" != \"world\" ]", 
        "out": [
            [
                true, 
                false, 
                false, 
                true
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "[[1,2,3] == [1,2,3], [1,2,3] != [1,2,3], [1,2,3] == [4,5,6], [1,2,3] != [4,5,6]]", 
        "out": [
            [
                true, 
                false, 
                false, 
                true
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "[{\"foo\":42} == {\"foo\":42},{\"foo\":42} != {\"foo\":42}, {\"foo\":42} != {\"bar\":42}, {\"foo\":42} == {\"bar\":42}]", 
        "out": [
            [
                true, 
                false, 
                true, 
                false
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "[{\"foo\":[1,2,{\"bar\":18},\"world\"]} == {\"foo\":[1,2,{\"bar\":18},\"world\"]},{\"foo\":[1,2,{\"bar\":18},\"world\"]} == {\"foo\":[1,2,{\"bar\":19},\"world\"]}]", 
        "out": [
            [
                true, 
                false
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "[(\"foo\" | contains(\"foo\")), (\"foobar\" | contains(\"foo\")), (\"foo\" | contains(\"foobar\"))]", 
        "out": [
            [
                true, 
                true, 
                false
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "[.[]|try if . == 0 then error(\"foo\") elif . == 1 then .a elif . == 2 then empty else . end catch .]", 
        "out": [
            [
                "foo", 
                "Cannot index number with string \"a\"", 
                3
            ]
        ], 
        "in": [
            0, 
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "[.[]|startswith(\"foo\")]", 
        "out": [
            [
                false, 
                true, 
                false, 
                true, 
                false
            ]
        ], 
        "in": [
            "fo", 
            "foo", 
            "barfoo", 
            "foobar", 
            "barfoob"
        ]
    }, 
    {
        "q": "[.[]|endswith(\"foo\")]", 
        "out": [
            [
                false, 
                true, 
                true, 
                false, 
                false
            ]
        ], 
        "in": [
            "fo", 
            "foo", 
            "barfoo", 
            "foobar", 
            "barfoob"
        ]
    }, 
    {
        "q": "[.[] | split(\", \")]", 
        "out": [
            [
                [
                    "a,b", 
                    "c", 
                    "d", 
                    "e,f"
                ], 
                [
                    "", 
                    "a,b", 
                    "c", 
                    "d", 
                    "e,f", 
                    ""
                ]
            ]
        ], 
        "in": [
            "a,b, c, d, e,f", 
            ", a,b, c, d, e,f, "
        ]
    }, 
    {
        "q": "split(\"\")", 
        "out": [
            [
                "a", 
                "b", 
                "c"
            ]
        ], 
        "in": "abc"
    }, 
    {
        "q": "[.[]|ltrimstr(\"foo\")]", 
        "out": [
            [
                "fo", 
                "", 
                "barfoo", 
                "bar", 
                "afoo"
            ]
        ], 
        "in": [
            "fo", 
            "foo", 
            "barfoo", 
            "foobar", 
            "afoo"
        ]
    }, 
    {
        "q": "[.[]|rtrimstr(\"foo\")]", 
        "out": [
            [
                "fo", 
                "", 
                "bar", 
                "foobar", 
                "foob"
            ]
        ], 
        "in": [
            "fo", 
            "foo", 
            "barfoo", 
            "foobar", 
            "foob"
        ]
    }, 
    {
        "q": "[(index(\",\"), rindex(\",\")), indices(\",\")]", 
        "out": [
            [
                1, 
                13, 
                [
                    1, 
                    4, 
                    8, 
                    13
                ]
            ]
        ], 
        "in": "a,bc,def,ghij,klmno"
    }, 
    {
        "q": "indices(1)", 
        "out": [
            [
                1, 
                2, 
                6
            ]
        ], 
        "in": [
            0, 
            1, 
            1, 
            2, 
            3, 
            4, 
            1, 
            5
        ]
    }, 
    {
        "q": "indices([1,2])", 
        "out": [
            [
                1, 
                8
            ]
        ], 
        "in": [
            0, 
            1, 
            2, 
            3, 
            1, 
            4, 
            2, 
            5, 
            1, 
            2, 
            6, 
            7
        ]
    }, 
    {
        "q": "indices([1,2])", 
        "out": [
            []
        ], 
        "in": [
            1
        ]
    }, 
    {
        "q": "indices(\", \")", 
        "out": [
            [
                3, 
                9, 
                14
            ]
        ], 
        "in": "a,b, cd,e, fgh, ijkl"
    }, 
    {
        "q": "[.[]|split(\",\")]", 
        "out": [
            [
                [
                    "a", 
                    " bc", 
                    " def", 
                    " ghij", 
                    " jklmn", 
                    " a", 
                    "b", 
                    " c", 
                    "d", 
                    " e", 
                    "f"
                ], 
                [
                    "a", 
                    "b", 
                    "c", 
                    "d", 
                    " e", 
                    "f", 
                    "g", 
                    "h"
                ]
            ]
        ], 
        "in": [
            "a, bc, def, ghij, jklmn, a,b, c,d, e,f", 
            "a,b,c,d, e,f,g,h"
        ]
    }, 
    {
        "q": "[.[]|split(\", \")]", 
        "out": [
            [
                [
                    "a", 
                    "bc", 
                    "def", 
                    "ghij", 
                    "jklmn", 
                    "a,b", 
                    "c,d", 
                    "e,f"
                ], 
                [
                    "a,b,c,d", 
                    "e,f,g,h"
                ]
            ]
        ], 
        "in": [
            "a, bc, def, ghij, jklmn, a,b, c,d, e,f", 
            "a,b,c,d, e,f,g,h"
        ]
    }, 
    {
        "q": "[.[] * 3]", 
        "out": [
            [
                "aaa", 
                "ababab", 
                "abcabcabc"
            ]
        ], 
        "in": [
            "a", 
            "ab", 
            "abc"
        ]
    }, 
    {
        "q": "[.[] / \",\"]", 
        "out": [
            [
                [
                    "a", 
                    " bc", 
                    " def", 
                    " ghij", 
                    " jklmn", 
                    " a", 
                    "b", 
                    " c", 
                    "d", 
                    " e", 
                    "f"
                ], 
                [
                    "a", 
                    "b", 
                    "c", 
                    "d", 
                    " e", 
                    "f", 
                    "g", 
                    "h"
                ]
            ]
        ], 
        "in": [
            "a, bc, def, ghij, jklmn, a,b, c,d, e,f", 
            "a,b,c,d, e,f,g,h"
        ]
    }, 
    {
        "q": "[.[] / \", \"]", 
        "out": [
            [
                [
                    "a", 
                    "bc", 
                    "def", 
                    "ghij", 
                    "jklmn", 
                    "a,b", 
                    "c,d", 
                    "e,f"
                ], 
                [
                    "a,b,c,d", 
                    "e,f,g,h"
                ]
            ]
        ], 
        "in": [
            "a, bc, def, ghij, jklmn, a,b, c,d, e,f", 
            "a,b,c,d, e,f,g,h"
        ]
    }, 
    {
        "q": "map(.[1] as $needle | .[0] | contains($needle))", 
        "out": [
            [
                true, 
                true, 
                true, 
                false, 
                false
            ]
        ], 
        "in": [
            [
                [], 
                []
            ], 
            [
                [
                    1, 
                    2, 
                    3
                ], 
                [
                    1, 
                    2
                ]
            ], 
            [
                [
                    1, 
                    2, 
                    3
                ], 
                [
                    3, 
                    1
                ]
            ], 
            [
                [
                    1, 
                    2, 
                    3
                ], 
                [
                    4
                ]
            ], 
            [
                [
                    1, 
                    2, 
                    3
                ], 
                [
                    1, 
                    4
                ]
            ]
        ]
    }, 
    {
        "q": "map(.[1] as $needle | .[0] | contains($needle))", 
        "out": [
            [
                true, 
                true, 
                false
            ]
        ], 
        "in": [
            [
                [
                    "foobar", 
                    "foobaz"
                ], 
                [
                    "baz", 
                    "bar"
                ]
            ], 
            [
                [
                    "foobar", 
                    "foobaz"
                ], 
                [
                    "foo"
                ]
            ], 
            [
                [
                    "foobar", 
                    "foobaz"
                ], 
                [
                    "blap"
                ]
            ]
        ]
    }, 
    {
        "q": "[({foo: 12, bar:13} | contains({foo: 12})), ({foo: 12} | contains({})), ({foo: 12, bar:13} | contains({baz:14}))]", 
        "out": [
            [
                true, 
                true, 
                false
            ]
        ], 
        "in": {}
    }, 
    {
        "q": "{foo: {baz: 12, blap: {bar: 13}}, bar: 14} | contains({bar: 14, foo: {blap: {}}})", 
        "out": [
            true
        ], 
        "in": {}
    }, 
    {
        "q": "{foo: {baz: 12, blap: {bar: 13}}, bar: 14} | contains({bar: 14, foo: {blap: {bar: 14}}})", 
        "out": [
            false
        ], 
        "in": {}
    }, 
    {
        "q": "sort", 
        "out": [
            [
                null, 
                null, 
                false, 
                true, 
                2, 
                10, 
                42, 
                "ab", 
                "abc", 
                "abcd", 
                "hello", 
                [
                    2, 
                    5, 
                    3, 
                    11
                ], 
                [
                    2, 
                    5, 
                    6
                ], 
                [
                    2, 
                    6
                ], 
                [
                    3, 
                    10
                ], 
                {}, 
                {
                    "a": 42
                }, 
                {
                    "a": 42, 
                    "b": 2
                }, 
                {
                    "a": [], 
                    "b": 1
                }
            ]
        ], 
        "in": [
            42, 
            [
                2, 
                5, 
                3, 
                11
            ], 
            10, 
            {
                "a": 42, 
                "b": 2
            }, 
            {
                "a": 42
            }, 
            true, 
            2, 
            [
                2, 
                6
            ], 
            "hello", 
            null, 
            [
                2, 
                5, 
                6
            ], 
            {
                "a": [], 
                "b": 1
            }, 
            "abc", 
            "ab", 
            [
                3, 
                10
            ], 
            {}, 
            false, 
            "abcd", 
            null
        ]
    }, 
    {
        "q": "(sort_by(.b) | sort_by(.a)), sort_by(.a, .b), sort_by(.b, .c), group_by(.b), group_by(.a + .b - .c == 2)", 
        "out": [
            [
                {
                    "a": 0, 
                    "c": 43, 
                    "b": 2
                }, 
                {
                    "a": 1, 
                    "c": 14, 
                    "b": 4
                }, 
                {
                    "a": 1, 
                    "c": 3, 
                    "b": 4
                }, 
                {
                    "a": 4, 
                    "c": 3, 
                    "b": 1
                }
            ], 
            [
                {
                    "a": 0, 
                    "c": 43, 
                    "b": 2
                }, 
                {
                    "a": 1, 
                    "c": 14, 
                    "b": 4
                }, 
                {
                    "a": 1, 
                    "c": 3, 
                    "b": 4
                }, 
                {
                    "a": 4, 
                    "c": 3, 
                    "b": 1
                }
            ], 
            [
                {
                    "a": 4, 
                    "c": 3, 
                    "b": 1
                }, 
                {
                    "a": 0, 
                    "c": 43, 
                    "b": 2
                }, 
                {
                    "a": 1, 
                    "c": 3, 
                    "b": 4
                }, 
                {
                    "a": 1, 
                    "c": 14, 
                    "b": 4
                }
            ], 
            [
                [
                    {
                        "a": 4, 
                        "c": 3, 
                        "b": 1
                    }
                ], 
                [
                    {
                        "a": 0, 
                        "c": 43, 
                        "b": 2
                    }
                ], 
                [
                    {
                        "a": 1, 
                        "c": 14, 
                        "b": 4
                    }, 
                    {
                        "a": 1, 
                        "c": 3, 
                        "b": 4
                    }
                ]
            ], 
            [
                [
                    {
                        "a": 1, 
                        "c": 14, 
                        "b": 4
                    }, 
                    {
                        "a": 0, 
                        "c": 43, 
                        "b": 2
                    }
                ], 
                [
                    {
                        "a": 4, 
                        "c": 3, 
                        "b": 1
                    }, 
                    {
                        "a": 1, 
                        "c": 3, 
                        "b": 4
                    }
                ]
            ]
        ], 
        "in": [
            {
                "a": 1, 
                "c": 14, 
                "b": 4
            }, 
            {
                "a": 4, 
                "c": 3, 
                "b": 1
            }, 
            {
                "a": 1, 
                "c": 3, 
                "b": 4
            }, 
            {
                "a": 0, 
                "c": 43, 
                "b": 2
            }
        ]
    }, 
    {
        "q": "unique", 
        "out": [
            [
                1, 
                2, 
                3, 
                5
            ]
        ], 
        "in": [
            1, 
            2, 
            5, 
            3, 
            5, 
            3, 
            1, 
            3
        ]
    }, 
    {
        "q": "unique", 
        "out": [
            []
        ], 
        "in": []
    }, 
    {
        "q": "[min, max, min_by(.[1]), max_by(.[1]), min_by(.[2]), max_by(.[2])]", 
        "out": [
            [
                [
                    1, 
                    3, 
                    "a"
                ], 
                [
                    4, 
                    2, 
                    "a"
                ], 
                [
                    3, 
                    1, 
                    "a"
                ], 
                [
                    2, 
                    4, 
                    "a"
                ], 
                [
                    4, 
                    2, 
                    "a"
                ], 
                [
                    1, 
                    3, 
                    "a"
                ]
            ]
        ], 
        "in": [
            [
                4, 
                2, 
                "a"
            ], 
            [
                3, 
                1, 
                "a"
            ], 
            [
                2, 
                4, 
                "a"
            ], 
            [
                1, 
                3, 
                "a"
            ]
        ]
    }, 
    {
        "q": "[min,max,min_by(.),max_by(.)]", 
        "out": [
            [
                null, 
                null, 
                null, 
                null
            ]
        ], 
        "in": []
    }, 
    {
        "q": ".foo[.baz]", 
        "out": [
            4
        ], 
        "in": {
            "foo": {
                "bar": 4
            }, 
            "baz": "bar"
        }
    }, 
    {
        "q": ".[] | .error = \"no, it's OK\"", 
        "out": [
            {
                "error": "no, it's OK"
            }
        ], 
        "in": [
            {
                "error": true
            }
        ]
    }, 
    {
        "q": "[{a:1}] | .[] | .a=999", 
        "out": [
            {
                "a": 999
            }
        ], 
        "in": null
    }, 
    {
        "q": "to_entries", 
        "out": [
            [
                {
                    "value": 1, 
                    "key": "a"
                }, 
                {
                    "value": 2, 
                    "key": "b"
                }
            ]
        ], 
        "in": {
            "a": 1, 
            "b": 2
        }
    }, 
    {
        "q": "from_entries", 
        "out": [
            {
                "a": 1, 
                "c": 3, 
                "b": 2, 
                "d": 4
            }
        ], 
        "in": [
            {
                "value": 1, 
                "key": "a"
            }, 
            {
                "Value": 2, 
                "Key": "b"
            }, 
            {
                "name": "c", 
                "value": 3
            }, 
            {
                "Name": "d", 
                "Value": 4
            }
        ]
    }, 
    {
        "q": "with_entries(.key |= \"KEY_\" + .)", 
        "out": [
            {
                "KEY_a": 1, 
                "KEY_b": 2
            }
        ], 
        "in": {
            "a": 1, 
            "b": 2
        }
    }, 
    {
        "q": "map(has(\"foo\"))", 
        "out": [
            [
                true, 
                false
            ]
        ], 
        "in": [
            {
                "foo": 42
            }, 
            {}
        ]
    }, 
    {
        "q": "map(has(2))", 
        "out": [
            [
                false, 
                true
            ]
        ], 
        "in": [
            [
                0, 
                1
            ], 
            [
                "a", 
                "b", 
                "c"
            ]
        ]
    }, 
    {
        "q": "keys", 
        "out": [
            [
                0, 
                1, 
                2
            ]
        ], 
        "in": [
            42, 
            3, 
            35
        ]
    }, 
    {
        "q": "[][.]", 
        "out": [
            null
        ], 
        "in": 1000000000000000000
    }, 
    {
        "q": "map([1,2][0:.])", 
        "out": [
            [
                [
                    1
                ], 
                [
                    1
                ], 
                [
                    1, 
                    2
                ], 
                [
                    1, 
                    2
                ], 
                [
                    1, 
                    2
                ]
            ]
        ], 
        "in": [
            -1, 
            1, 
            2, 
            3, 
            1000000000000000000
        ]
    }, 
    {
        "q": "{\"k\": {\"a\": 1, \"b\": 2}} * .", 
        "out": [
            {
                "k": {
                    "a": 0, 
                    "c": 3, 
                    "b": 2
                }
            }
        ], 
        "in": {
            "k": {
                "a": 0, 
                "c": 3
            }
        }
    }, 
    {
        "q": "{\"k\": {\"a\": 1, \"b\": 2}, \"hello\": {\"x\": 1}} * .", 
        "out": [
            {
                "k": {
                    "a": 0, 
                    "c": 3, 
                    "b": 2
                }, 
                "hello": 1
            }
        ], 
        "in": {
            "k": {
                "a": 0, 
                "c": 3
            }, 
            "hello": 1
        }
    }, 
    {
        "q": "{\"k\": {\"a\": 1, \"b\": 2}, \"hello\": 1} * .", 
        "out": [
            {
                "k": {
                    "a": 0, 
                    "c": 3, 
                    "b": 2
                }, 
                "hello": {
                    "x": 1
                }
            }
        ], 
        "in": {
            "k": {
                "a": 0, 
                "c": 3
            }, 
            "hello": {
                "x": 1
            }
        }
    }, 
    {
        "q": "{\"a\": {\"b\": 1}, \"c\": {\"d\": 2}, \"e\": 5} * .", 
        "out": [
            {
                "a": {
                    "b": 2
                }, 
                "c": {
                    "d": 3, 
                    "f": 9
                }, 
                "e": 5
            }
        ], 
        "in": {
            "a": {
                "b": 2
            }, 
            "c": {
                "d": 3, 
                "f": 9
            }
        }
    }, 
    {
        "q": "[.[]|arrays]", 
        "out": [
            [
                [], 
                [
                    3, 
                    []
                ]
            ]
        ], 
        "in": [
            1, 
            2, 
            "foo", 
            [], 
            [
                3, 
                []
            ], 
            {}, 
            true, 
            false, 
            null
        ]
    }, 
    {
        "q": "[.[]|objects]", 
        "out": [
            [
                {}
            ]
        ], 
        "in": [
            1, 
            2, 
            "foo", 
            [], 
            [
                3, 
                []
            ], 
            {}, 
            true, 
            false, 
            null
        ]
    }, 
    {
        "q": "[.[]|iterables]", 
        "out": [
            [
                [], 
                [
                    3, 
                    []
                ], 
                {}
            ]
        ], 
        "in": [
            1, 
            2, 
            "foo", 
            [], 
            [
                3, 
                []
            ], 
            {}, 
            true, 
            false, 
            null
        ]
    }, 
    {
        "q": "[.[]|scalars]", 
        "out": [
            [
                1, 
                2, 
                "foo", 
                true, 
                false, 
                null
            ]
        ], 
        "in": [
            1, 
            2, 
            "foo", 
            [], 
            [
                3, 
                []
            ], 
            {}, 
            true, 
            false, 
            null
        ]
    }, 
    {
        "q": "[.[]|values]", 
        "out": [
            [
                1, 
                2, 
                "foo", 
                [], 
                [
                    3, 
                    []
                ], 
                {}, 
                true, 
                false
            ]
        ], 
        "in": [
            1, 
            2, 
            "foo", 
            [], 
            [
                3, 
                []
            ], 
            {}, 
            true, 
            false, 
            null
        ]
    }, 
    {
        "q": "[.[]|booleans]", 
        "out": [
            [
                true, 
                false
            ]
        ], 
        "in": [
            1, 
            2, 
            "foo", 
            [], 
            [
                3, 
                []
            ], 
            {}, 
            true, 
            false, 
            null
        ]
    }, 
    {
        "q": "[.[]|nulls]", 
        "out": [
            [
                null
            ]
        ], 
        "in": [
            1, 
            2, 
            "foo", 
            [], 
            [
                3, 
                []
            ], 
            {}, 
            true, 
            false, 
            null
        ]
    }, 
    {
        "q": "flatten", 
        "out": [
            [
                0, 
                1, 
                2, 
                3
            ]
        ], 
        "in": [
            0, 
            [
                1
            ], 
            [
                [
                    2
                ]
            ], 
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ]
    }, 
    {
        "q": "flatten(0)", 
        "out": [
            [
                0, 
                [
                    1
                ], 
                [
                    [
                        2
                    ]
                ], 
                [
                    [
                        [
                            3
                        ]
                    ]
                ]
            ]
        ], 
        "in": [
            0, 
            [
                1
            ], 
            [
                [
                    2
                ]
            ], 
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ]
    }, 
    {
        "q": "flatten(2)", 
        "out": [
            [
                0, 
                1, 
                2, 
                [
                    3
                ]
            ]
        ], 
        "in": [
            0, 
            [
                1
            ], 
            [
                [
                    2
                ]
            ], 
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ]
    }, 
    {
        "q": "flatten(2)", 
        "out": [
            [
                0, 
                1, 
                2, 
                1, 
                [
                    3
                ], 
                2
            ]
        ], 
        "in": [
            0, 
            [
                1, 
                [
                    2
                ]
            ], 
            [
                1, 
                [
                    [
                        3
                    ], 
                    2
                ]
            ]
        ]
    }, 
    {
        "q": "try flatten(-1) catch .", 
        "out": [
            "flatten depth must not be negative"
        ], 
        "in": [
            0, 
            [
                1
            ], 
            [
                [
                    2
                ]
            ], 
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ]
    }, 
    {
        "q": "transpose", 
        "out": [
            [
                [
                    1, 
                    2
                ], 
                [
                    null, 
                    3
                ]
            ]
        ], 
        "in": [
            [
                1
            ], 
            [
                2, 
                3
            ]
        ]
    }, 
    {
        "q": "ascii_upcase", 
        "out": [
            "USEFUL BUT NOT FOR \u00e9"
        ], 
        "in": "useful but not for \u00e9"
    }, 
    {
        "q": "strftime(\"%A, %B %e, %Y\")", 
        "out": [
            "Tuesday, June 30, 2015"
        ], 
        "in": 1435677542.822351
    }, 
    {
        "q": "include \"c\"; [a, c]", 
        "out": [
            [
                0, 
                "acmehbah"
            ]
        ], 
        "in": null
    }, 
    {
        "q": "try -. catch .", 
        "out": [
            "string (\"very-long-...) cannot be negated"
        ], 
        "in": "very-long-string"
    }, 
    {
        "q": "join(\",\")", 
        "out": [
            "1,2,true,false,3.4"
        ], 
        "in": [
            "1", 
            2, 
            true, 
            false, 
            3.4
        ]
    }, 
    {
        "q": ".[] | join(\",\")", 
        "out": [
            "", 
            "", 
            ",", 
            ",,"
        ], 
        "in": [
            [], 
            [
                null
            ], 
            [
                null, 
                null
            ], 
            [
                null, 
                null, 
                null
            ]
        ]
    }, 
    {
        "q": ".[] | join(\",\")", 
        "out": [
            "a,", 
            ",a"
        ], 
        "in": [
            [
                "a", 
                null
            ], 
            [
                null, 
                "a"
            ]
        ]
    }, 
    {
        "q": "try join(\",\") catch .", 
        "out": [
            "string (\"1,2,\") and object ({\"a\":{\"b\":{...) cannot be added"
        ], 
        "in": [
            "1", 
            "2", 
            {
                "a": {
                    "b": {
                        "c": 33
                    }
                }
            }
        ]
    }, 
    {
        "q": "try join(\",\") catch .", 
        "out": [
            "string (\"1,2,\") and array ([3,4,5]) cannot be added"
        ], 
        "in": [
            "1", 
            "2", 
            [
                3, 
                4, 
                5
            ]
        ]
    }, 
    {
        "q": "{if:0,and:1,or:2,then:3,else:4,elif:5,end:6,as:7,def:8,reduce:9,foreach:10,try:11,catch:12,label:13,import:14,include:15,module:16}", 
        "out": [
            {
                "and": 1, 
                "then": 3, 
                "elif": 5, 
                "include": 15, 
                "end": 6, 
                "reduce": 9, 
                "module": 16, 
                "else": 4, 
                "try": 11, 
                "as": 7, 
                "foreach": 10, 
                "catch": 12, 
                "import": 14, 
                "label": 13, 
                "or": 2, 
                "def": 8, 
                "if": 0
            }
        ], 
        "in": null
    }, 
    {
        "q": "try (1/.) catch .", 
        "out": [
            "number (1) and number (0) cannot be divided because the divisor is zero"
        ], 
        "in": 0
    }, 
    {
        "q": "try (1%.) catch .", 
        "out": [
            "number (1) and number (0) cannot be divided (remainder) because the divisor is zero"
        ], 
        "in": 0
    }, 
    {
        "q": "[range(-52;52;1)] as $powers | [$powers[]|pow(2;.)|log2] == $powers", 
        "out": [
            true
        ], 
        "in": null
    }, 
    {
        "q": "[range(-99/2;99/2;1)] as $orig | [$orig[]|pow(2;.)|log2] as $back | ($orig|keys)[]|. as $k | (($orig|.[$k])-($back|.[$k]))|if . < 0 then . * -1 else . end|select(.>.00005)", 
        "out": [], 
        "in": null
    }, 
    {
        "q": "(.[{}] = 0)?", 
        "out": [], 
        "in": null
    }
]