[
    {
        "in": null,
        "out": [
            true
        ],
        "q": "true"
    },
    {
        "in": null,
        "out": [
            false
        ],
        "q": "false"
    },
    {
        "in": 42,
        "out": [
            null
        ],
        "q": "null"
    },
    {
        "in": null,
        "out": [
            1
        ],
        "q": "1"
    },
    {
        "in": null,
        "out": [
            -1
        ],
        "q": "-1"
    },
    {
        "in": null,
        "out": [
            {}
        ],
        "q": "{}"
    },
    {
        "in": null,
        "out": [
            []
        ],
        "q": "[]"
    },
    {
        "in": null,
        "out": [
            {
                "x": -1
            }
        ],
        "q": "{x: -1}"
    },
    {
        "in": "byte order mark",
        "out": [
            "byte order mark"
        ],
        "q": "."
    },
    {
        "in": null,
        "out": [
            "Aa\r\n\t\b\f\u03bc"
        ],
        "q": "\"Aa\\r\\n\\t\\b\\f\\u03bc\""
    },
    {
        "in": "Aa\r\n\t\b\f\u03bc",
        "out": [
            "Aa\r\n\t\b\f\u03bc"
        ],
        "q": "."
    },
    {
        "in": null,
        "out": [
            "interpolation"
        ],
        "q": "\"inter\\(\"pol\" + \"ation\")\""
    },
    {
        "in": "<>&'\"\t",
        "out": [
            "<>&'\"\t",
            "\"<>&'\\\"\\t\"",
            "1,\"<>&'\"\"\t\"",
            "1\t<>&'\"\\t",
            "&lt;&gt;&amp;&apos;&quot;\t",
            "%3C%3E%26'%22%09",
            "'<>&'\\''\"\t'",
            "PD4mJyIJ"
        ],
        "q": "@text,@json,([1,.] | (@csv, @tsv)),@html,@uri,@sh,@base64"
    },
    {
        "in": "fo\u00f3bar\n",
        "out": [
            "Zm/Ds2Jhcgo="
        ],
        "q": "@base64"
    },
    {
        "in": "Zm/Ds2Jhcgo=",
        "out": [
            "fo\u00f3bar\n"
        ],
        "q": "@base64d"
    },
    {
        "in": "\u03bc",
        "out": [
            "%CE%BC"
        ],
        "q": "@uri"
    },
    {
        "in": "<script>hax</script>",
        "out": [
            "<b>&lt;script&gt;hax&lt;/script&gt;</b>"
        ],
        "q": "@html \"<b>\\(.)</b>\""
    },
    {
        "in": [
            "foo",
            1,
            [
                "a",
                1,
                "b",
                2,
                {
                    "foo": "bar"
                }
            ]
        ],
        "out": [
            [
                "foo",
                1,
                [
                    "a",
                    1,
                    "b",
                    2,
                    {
                        "foo": "bar"
                    }
                ]
            ]
        ],
        "q": "[.[]|tojson|fromjson]"
    },
    {
        "in": null,
        "out": [
            {
                "a": 1
            }
        ],
        "q": "{a: 1}"
    },
    {
        "in": {
            "a": 1,
            "b": 2,
            "c": 3,
            "d": "c"
        },
        "out": [
            {
                "a": 1,
                "b": 2,
                "c": 1,
                "e": 2
            }
        ],
        "q": "{a,b,(.d):.a,e:.b}"
    },
    {
        "in": {
            "a": 1,
            "a$2": 4,
            "b": 2,
            "c": 3
        },
        "out": [
            {
                "a": 1,
                "a$2": 4,
                "b": 2
            }
        ],
        "q": "{\"a\",b,\"a$\\(1+1)\"}"
    },
    {
        "in": {
            "bar": 43,
            "foo": 42
        },
        "out": [
            42
        ],
        "q": ".foo"
    },
    {
        "in": {
            "bar": "badvalue",
            "foo": {
                "bar": 42
            }
        },
        "out": [
            42
        ],
        "q": ".foo | .bar"
    },
    {
        "in": {
            "bar": "badvalue",
            "foo": {
                "bar": 42
            }
        },
        "out": [
            42
        ],
        "q": ".foo.bar"
    },
    {
        "in": {
            "foo_bar": 2
        },
        "out": [
            2
        ],
        "q": ".foo_bar"
    },
    {
        "in": {
            "bar": "badvalue",
            "foo": {
                "bar": 42
            }
        },
        "out": [
            42
        ],
        "q": ".[\"foo\"].bar"
    },
    {
        "in": {
            "foo": {
                "bar": 20
            }
        },
        "out": [
            20
        ],
        "q": ".\"foo\".\"bar\""
    },
    {
        "in": [
            1,
            [
                2
            ],
            {
                "bar": 4,
                "foo": 3
            },
            {},
            {
                "foo": 5
            }
        ],
        "out": [
            [
                3,
                null,
                5
            ]
        ],
        "q": "[.[]|.foo?]"
    },
    {
        "in": [
            1,
            [
                2
            ],
            [],
            {
                "foo": 3
            },
            {
                "foo": {
                    "bar": 4
                }
            },
            {}
        ],
        "out": [
            [
                4,
                null
            ]
        ],
        "q": "[.[]|.foo?.bar?]"
    },
    {
        "in": [
            1,
            [
                [
                    2
                ]
            ],
            {
                "a": [
                    1
                ]
            }
        ],
        "out": [
            [
                [
                    1,
                    [
                        [
                            2
                        ]
                    ],
                    {
                        "a": [
                            1
                        ]
                    }
                ],
                1,
                [
                    [
                        2
                    ]
                ],
                [
                    2
                ],
                2,
                {
                    "a": [
                        1
                    ]
                },
                [
                    1
                ],
                1
            ]
        ],
        "q": "[..]"
    },
    {
        "in": [
            1,
            null,
            [],
            [
                1,
                [
                    2,
                    [
                        [
                            3
                        ]
                    ]
                ]
            ],
            [
                {}
            ],
            [
                {
                    "a": [
                        1,
                        [
                            2
                        ]
                    ]
                }
            ]
        ],
        "out": [
            [
                1,
                [
                    2,
                    [
                        [
                            3
                        ]
                    ]
                ],
                {},
                {
                    "a": [
                        1,
                        [
                            2
                        ]
                    ]
                }
            ]
        ],
        "q": "[.[]|.[]?]"
    },
    {
        "in": [
            1,
            null,
            true,
            false,
            "abcdef",
            {},
            {
                "a": 1,
                "b": 2
            },
            [],
            [
                1,
                2,
                3,
                4,
                5
            ],
            [
                1,
                2
            ]
        ],
        "out": [
            [
                null,
                "bc",
                [],
                [
                    2,
                    3
                ],
                [
                    2
                ]
            ]
        ],
        "q": "[.[]|.[1:3]?]"
    },
    {
        "in": null,
        "out": [
            "Out of bounds negative array index"
        ],
        "q": "try (.foo[-1] = 0) catch ."
    },
    {
        "in": null,
        "out": [
            "Out of bounds negative array index"
        ],
        "q": "try (.foo[-2] = 0) catch ."
    },
    {
        "in": [
            0,
            1,
            2
        ],
        "out": [
            [
                0,
                1,
                5
            ]
        ],
        "q": ".[-1] = 5"
    },
    {
        "in": [
            0,
            1,
            2
        ],
        "out": [
            [
                0,
                5,
                2
            ]
        ],
        "q": ".[-2] = 5"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            1,
            2,
            3
        ],
        "q": ".[]"
    },
    {
        "in": [],
        "out": [
            1,
            1
        ],
        "q": "1,1"
    },
    {
        "in": [],
        "out": [
            1,
            []
        ],
        "q": "1,."
    },
    {
        "in": [
            2
        ],
        "out": [
            [
                [
                    2
                ]
            ]
        ],
        "q": "[.]"
    },
    {
        "in": [
            3
        ],
        "out": [
            [
                [
                    2
                ]
            ]
        ],
        "q": "[[2]]"
    },
    {
        "in": [
            2
        ],
        "out": [
            [
                {}
            ]
        ],
        "q": "[{}]"
    },
    {
        "in": [
            "a"
        ],
        "out": [
            [
                "a"
            ]
        ],
        "q": "[.[]]"
    },
    {
        "in": [
            "a",
            "b"
        ],
        "out": [
            [
                [
                    "a",
                    "b"
                ],
                1,
                [
                    "a",
                    "b"
                ],
                "a",
                "b",
                2,
                3
            ]
        ],
        "q": "[(.,1),((.,.[]),(2,3))]"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            [
                5,
                5,
                [
                    1,
                    2,
                    3
                ],
                1,
                2,
                3
            ]
        ],
        "q": "[([5,5][]),.,.[]]"
    },
    {
        "in": null,
        "out": [
            1,
            2,
            3
        ],
        "q": "{x: (1,2)},{x:3} | .x"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            2
        ],
        "q": ".[-2]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ]
        ],
        "q": "[range(0;10)]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                1,
                2,
                0,
                1,
                2,
                3,
                1,
                2,
                1,
                2,
                3
            ]
        ],
        "q": "[range(0,1;3,4)]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                3,
                6,
                9
            ]
        ],
        "q": "[range(0;10;3)]"
    },
    {
        "in": null,
        "out": [
            []
        ],
        "q": "[range(0;10;-1)]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                -1,
                -2,
                -3,
                -4
            ]
        ],
        "q": "[range(0;-5;-1)]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                1,
                2,
                3,
                0,
                2,
                0,
                1,
                2,
                3,
                4,
                0,
                2,
                4,
                1,
                2,
                3,
                1,
                3,
                1,
                2,
                3,
                4,
                1,
                3
            ]
        ],
        "q": "[range(0,1;4,5;1,2)]"
    },
    {
        "in": 1,
        "out": [
            [
                1,
                2,
                4,
                8,
                16,
                32,
                64
            ]
        ],
        "q": "[while(.<100; .*2)]"
    },
    {
        "in": [
            1,
            2,
            3,
            4,
            5
        ],
        "out": [
            [
                1,
                2,
                6,
                24,
                120
            ]
        ],
        "q": "[.[]|[.,1]|until(.[0] < 1; [.[0] - 1, .[1] * .[0]])|.[1]]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                1,
                2,
                3,
                4
            ]
        ],
        "q": "[foreach range(5) as $item (0; $item)]"
    },
    {
        "in": [
            [
                2,
                1
            ],
            [
                5,
                3
            ],
            [
                6,
                4
            ]
        ],
        "out": [
            [
                1,
                3,
                5
            ]
        ],
        "q": "[foreach .[] as [$i, $j] (0; . + $i - $j)]"
    },
    {
        "in": [
            {
                "a": 1
            },
            {
                "b": 2
            },
            {
                "a": 3,
                "b": 4
            }
        ],
        "out": [
            [
                -1,
                -1,
                -4
            ]
        ],
        "q": "[foreach .[] as {a:$a} (0; . + $a; -.)]"
    },
    {
        "in": [
            11,
            22,
            33,
            44,
            55,
            66,
            77,
            88,
            99
        ],
        "out": [
            [
                11,
                22,
                33
            ]
        ],
        "q": "[limit(3; .[])]"
    },
    {
        "in": 10,
        "out": [
            [
                0,
                9,
                0,
                5,
                "nth doesn't support negative indices"
            ]
        ],
        "q": "[first(range(.)), last(range(.)), nth(0; range(.)), nth(5; range(.)), try nth(-1; range(.)) catch .]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                1,
                2,
                3,
                4,
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ]
        ],
        "q": "[limit(5,7; range(9))]"
    },
    {
        "in": null,
        "out": [
            [
                4,
                2
            ]
        ],
        "q": "[nth(5,7; range(9;0;-1))]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                2,
                0,
                3,
                0,
                2,
                0,
                0,
                0,
                1,
                3,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ]
        ],
        "q": "[range(0,1,2;4,3,2;2,3)]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                1,
                2,
                0,
                1,
                2,
                3,
                4
            ]
        ],
        "q": "[range(3,5)]"
    },
    {
        "in": "a,b|c,d,e||f,g,h,|,|,i,j",
        "out": [
            [
                1,
                3,
                22,
                19,
                [
                    1,
                    5,
                    7,
                    12,
                    14,
                    16,
                    18,
                    20,
                    22
                ],
                [
                    3,
                    9,
                    10,
                    17,
                    19
                ]
            ]
        ],
        "q": "[(index(\",\",\"|\"), rindex(\",\",\"|\")), indices(\",\",\"|\")]"
    },
    {
        "in": [
            "a",
            "b",
            "c",
            "d"
        ],
        "out": [
            "a,b,c,d",
            "a/b/c/d"
        ],
        "q": "join(\",\",\"/\")"
    },
    {
        "in": [
            [],
            [
                ""
            ],
            [
                "",
                ""
            ],
            [
                "",
                "",
                ""
            ]
        ],
        "out": [
            [
                "",
                "",
                "a",
                "aa"
            ]
        ],
        "q": "[.[]|join(\"a\")]"
    },
    {
        "in": [
            0,
            [
                1
            ],
            [
                [
                    2
                ]
            ],
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ],
        "out": [
            [
                0,
                1,
                2,
                3
            ],
            [
                0,
                1,
                2,
                [
                    3
                ]
            ],
            [
                0,
                1,
                [
                    2
                ],
                [
                    [
                        3
                    ]
                ]
            ]
        ],
        "q": "flatten(3,2,1)"
    },
    {
        "in": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "out": [
            [
                [],
                [
                    2,
                    3
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4
                ],
                [
                    5,
                    6
                ],
                [],
                []
            ]
        ],
        "q": "[.[3:2], .[-5:4], .[:-2], .[-2:], .[3:3][1:], .[10:]]"
    },
    {
        "in": "abcdefghi",
        "out": [
            [
                "",
                "",
                "abcdefg",
                "hi",
                "",
                ""
            ]
        ],
        "q": "[.[3:2], .[-5:4], .[:-2], .[-2:], .[3:3][1:], .[10:]]"
    },
    {
        "in": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "out": [
            [
                0,
                1,
                4,
                5,
                6,
                7
            ],
            [
                0,
                1,
                "a",
                "b",
                4,
                5,
                6,
                7
            ],
            [
                0,
                1,
                "a",
                "b",
                "c",
                4,
                5,
                6,
                7
            ]
        ],
        "q": ".[2:4] = ([], [\"a\",\"b\"], [\"a\",\"b\",\"c\"])"
    },
    {
        "in": null,
        "out": [
            [
                1,
                2,
                1
            ]
        ],
        "q": "1 as $x | 2 as $y | [$x,$y,$x]"
    },
    {
        "in": null,
        "out": [
            [
                5
            ],
            [
                6
            ],
            [
                7
            ]
        ],
        "q": "[1,2,3][] as $x | [[4,5,6,7][$x]]"
    },
    {
        "in": 34324,
        "out": [
            43
        ],
        "q": "42 as $x | . | . | . + 432 | $x + 1"
    },
    {
        "in": null,
        "out": [
            [
                1,
                1,
                1
            ]
        ],
        "q": "1 as $x | [$x,$x,$x as $x | $x]"
    },
    {
        "in": null,
        "out": [
            1,
            3,
            null
        ],
        "q": "[1, {c:3, d:4}] as [$a, {c:$b, b:$c}] | $a, $b, $c"
    },
    {
        "in": {
            "as": 1,
            "exp": 3,
            "str": 2
        },
        "out": [
            [
                1,
                2,
                3
            ]
        ],
        "q": ". as {as: $kw, \"str\": $str, (\"e\"+\"x\"+\"p\"): $exp} | [$kw, $str, $exp]"
    },
    {
        "in": [
            [
                1
            ],
            [
                1,
                2,
                3
            ]
        ],
        "out": [
            [
                null,
                1
            ],
            [
                2,
                1
            ]
        ],
        "q": ".[] as [$a, $b] | [$b, $a]"
    },
    {
        "in": [
            0
        ],
        "out": [
            0
        ],
        "q": ". as $i | . as [$i] | $i"
    },
    {
        "in": [
            0
        ],
        "out": [
            [
                0
            ]
        ],
        "q": ". as [$i] | . as $i | $i"
    },
    {
        "in": null,
        "out": [
            2
        ],
        "q": "1+1"
    },
    {
        "in": "wtasdf",
        "out": [
            2.0
        ],
        "q": "1+1"
    },
    {
        "in": null,
        "out": [
            1
        ],
        "q": "2-1"
    },
    {
        "in": null,
        "out": [
            3
        ],
        "q": "2-(-1)"
    },
    {
        "in": "I wonder what this will be?",
        "out": [
            2.0
        ],
        "q": "1e+0+0.001e3"
    },
    {
        "in": 15,
        "out": [
            19.0
        ],
        "q": ".+4"
    },
    {
        "in": {
            "a": 42
        },
        "out": [
            {
                "a": 42
            }
        ],
        "q": ".+null"
    },
    {
        "in": null,
        "out": [
            null
        ],
        "q": "null+."
    },
    {
        "in": {
            "a": 42
        },
        "out": [
            42
        ],
        "q": ".a+.b"
    },
    {
        "in": null,
        "out": [
            [
                1,
                2,
                3,
                null
            ]
        ],
        "q": "[1,2,3] + [.]"
    },
    {
        "in": "asdfasdf",
        "out": [
            {
                "a": 1,
                "b": 2,
                "c": 3
            }
        ],
        "q": "{\"a\":1} + {\"b\":2} + {\"c\":3}"
    },
    {
        "in": "some string",
        "out": [
            "asdfjkl;some stringsome stringsome string"
        ],
        "q": "\"asdf\" + \"jkl;\" + . + . + ."
    },
    {
        "in": "\u0000 \u0000",
        "out": [
            "\u0000 \u0000\u0000 \u0000"
        ],
        "q": "\"\\u0000\\u0020\\u0000\" + ."
    },
    {
        "in": 11,
        "out": [
            31
        ],
        "q": "42 - ."
    },
    {
        "in": 1,
        "out": [
            [
                2,
                4
            ]
        ],
        "q": "[1,2,3,4,1] - [.,3]"
    },
    {
        "in": 4,
        "out": [
            [
                200,
                5
            ]
        ],
        "q": "[10 * 20, 20 / .]"
    },
    {
        "in": null,
        "out": [
            10
        ],
        "q": "1 + 2 * 2 + 10 / 2"
    },
    {
        "in": null,
        "out": [
            [
                2,
                8,
                10,
                14
            ]
        ],
        "q": "[16 / 4 / 2, 16 / 4 * 2, 16 - 4 - 2, 16 - 4 + 2]"
    },
    {
        "in": null,
        "out": [
            4
        ],
        "q": "25 % 7"
    },
    {
        "in": null,
        "out": [
            172
        ],
        "q": "49732 % 472"
    },
    {
        "in": 4,
        "out": [
            15
        ],
        "q": "1 + tonumber + (\"10\" | tonumber)"
    },
    {
        "in": {
            "num": 10.0,
            "object": {
                "a": 42
            }
        },
        "out": [
            [
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            [
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            [
                false,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false
            ],
            [
                false,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false
            ],
            [
                false,
                false,
                false,
                false,
                true,
                false,
                false,
                false,
                false
            ],
            [
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false,
                false
            ],
            [
                false,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                true,
                false
            ],
            [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                true
            ]
        ],
        "q": "[{\"a\":42},.object,10,.num,false,true,null,\"b\",[1,4]] | .[] as $x | [$x == .[]]"
    },
    {
        "in": [
            [],
            {},
            [
                1,
                2
            ],
            {
                "a": 42
            },
            "asdf",
            "\u03bc"
        ],
        "out": [
            [
                0,
                0,
                2,
                1,
                4,
                1
            ]
        ],
        "q": "[.[] | length]"
    },
    {
        "in": "asdf\u03bc",
        "out": [
            6
        ],
        "q": "utf8bytelength"
    },
    {
        "in": [
            [],
            {},
            [
                1,
                2
            ],
            55,
            true,
            false
        ],
        "out": [
            [
                "array ([]) only strings have UTF-8 byte length",
                "object ({}) only strings have UTF-8 byte length",
                "array ([1,2]) only strings have UTF-8 byte length",
                "number (55) only strings have UTF-8 byte length",
                "boolean (true) only strings have UTF-8 byte length",
                "boolean (false) only strings have UTF-8 byte length"
            ]
        ],
        "q": "[.[] | try utf8bytelength catch .]"
    },
    {
        "in": [
            {},
            {
                "abc": 2,
                "abcd": 1,
                "abcde": 3
            },
            {
                "x": 1,
                "y": 2,
                "z": 3
            }
        ],
        "out": [
            [
                [],
                [
                    "abc",
                    "abcd",
                    "abcde"
                ],
                [
                    "x",
                    "y",
                    "z"
                ]
            ]
        ],
        "q": "map(keys)"
    },
    {
        "in": null,
        "out": [
            [
                1,
                2,
                3,
                4
            ]
        ],
        "q": "[1,2,empty,3,empty,4]"
    },
    {
        "in": [
            [],
            [
                1,
                2,
                3
            ],
            [
                "a",
                "b",
                "c"
            ],
            [
                [
                    3
                ],
                [
                    4,
                    5
                ],
                [
                    6
                ]
            ],
            [
                {
                    "a": 1
                },
                {
                    "b": 2
                },
                {
                    "a": 3
                }
            ]
        ],
        "out": [
            [
                null,
                6,
                "abc",
                [
                    3,
                    4,
                    5,
                    6
                ],
                {
                    "a": 3,
                    "b": 2
                }
            ]
        ],
        "q": "map(add)"
    },
    {
        "in": [
            0,
            1,
            2
        ],
        "out": [
            [
                1,
                2,
                3
            ]
        ],
        "q": "map_values(.+1)"
    },
    {
        "in": 3.0,
        "out": [
            106.0,
            105.0
        ],
        "q": "def f: . + 1; def g: def g: . + 100; f | g | f; (f | g), g"
    },
    {
        "in": 123412345,
        "out": [
            1000,
            2000
        ],
        "q": "def f: (1000,2000); f"
    },
    {
        "in": [
            1,
            2
        ],
        "out": [
            [
                2,
                2,
                1,
                1,
                1,
                1
            ]
        ],
        "q": "def f(a;b;c;d;e;f): [a+1,b,c,d,e,f]; f(.[0];.[1];.[0];.[0];.[0];.[0])"
    },
    {
        "in": null,
        "out": [
            0
        ],
        "q": "def a: 0; . | a"
    },
    {
        "in": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
        ],
        "out": [
            [
                9,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                0
            ]
        ],
        "q": "def f(a;b;c;d;e;f;g;h;i;j): [j,i,h,g,f,e,d,c,b,a]; f(.[0];.[1];.[2];.[3];.[4];.[5];.[6];.[7];.[8];.[9])"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            [
                1,
                2,
                4,
                5
            ]
        ],
        "q": "([1,2] + [4,5])"
    },
    {
        "in": [
            1
        ],
        "out": [
            true
        ],
        "q": "true"
    },
    {
        "in": "hello",
        "out": [
            null,
            1,
            null
        ],
        "q": "null,1,null"
    },
    {
        "in": [
            5,
            6
        ],
        "out": [
            [
                1,
                2,
                3
            ]
        ],
        "q": "[1,2,3]"
    },
    {
        "in": [
            -1.1,
            1.1,
            1.9
        ],
        "out": [
            [
                -2,
                1,
                1
            ]
        ],
        "q": "[.[]|floor]"
    },
    {
        "in": [
            4,
            9
        ],
        "out": [
            [
                2,
                3
            ]
        ],
        "q": "[.[]|sqrt]"
    },
    {
        "in": [
            2,
            4,
            4,
            4,
            5,
            5,
            7,
            9
        ],
        "out": [
            2
        ],
        "q": "(add / length) as $m | map((. - $m) as $d | $d * $d) | add / length | sqrt"
    },
    {
        "in": 1,
        "out": [
            3.141592
        ],
        "q": "atan * 4 * 1000000|floor / 1000000"
    },
    {
        "in": null,
        "out": [
            [
                1,
                0.996917,
                0.987688,
                0.972369,
                0.951056,
                0.923879,
                0.891006,
                0.85264,
                0.809017,
                0.760406,
                0.707106,
                0.649448,
                0.587785,
                0.522498,
                0.45399,
                0.382683,
                0.309017,
                0.233445,
                0.156434,
                0.078459
            ]
        ],
        "q": "[(3.141592 / 2) * (range(0;20) / 20)|cos * 1000000|floor / 1000000]"
    },
    {
        "in": null,
        "out": [
            [
                0,
                0.078459,
                0.156434,
                0.233445,
                0.309016,
                0.382683,
                0.45399,
                0.522498,
                0.587785,
                0.649447,
                0.707106,
                0.760405,
                0.809016,
                0.85264,
                0.891006,
                0.923879,
                0.951056,
                0.972369,
                0.987688,
                0.996917
            ]
        ],
        "q": "[(3.141592 / 2) * (range(0;20) / 20)|sin * 1000000|floor / 1000000]"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            [
                [
                    [
                        1,
                        2,
                        3
                    ]
                ]
            ],
            [
                [
                    1,
                    2,
                    3
                ],
                42
            ],
            [
                [
                    1,
                    2,
                    3,
                    42
                ]
            ],
            [
                1,
                2,
                3,
                42,
                42
            ]
        ],
        "q": "def f(x): x | x; f([.], . + [42])"
    },
    {
        "in": "more testing",
        "out": [
            [
                1,
                100,
                2100.0,
                100,
                2100.0
            ]
        ],
        "q": "def id(x):x; 2000 as $x | def f(x):1 as $x | id([$x, x, x]); def g(x): 100 as $x | f($x,$x+x); g($x)"
    },
    {
        "in": [
            1,
            2,
            3
        ],
        "out": [
            true
        ],
        "q": "def x(a;b): a as $a | b as $b | $a + $b; def y($a;$b): $a + $b; def check(a;b): [x(a;b)] == [y(a;b)]; check(.[];.[]*2)"
    },
    {
        "in": 999999999,
        "out": [
            [
                [
                    110.0,
                    130.0
                ],
                [
                    210.0,
                    130.0
                ],
                [
                    110.0,
                    230.0
                ],
                [
                    210.0,
                    230.0
                ],
                [
                    120.0,
                    160.0
                ],
                [
                    220.0,
                    160.0
                ],
                [
                    120.0,
                    260.0
                ],
                [
                    220.0,
                    260.0
                ]
            ]
        ],
        "q": "[[20,10][1,0] as $x | def f: (100,200) as $y | def g: [$x + $y, .]; . + $x | g; f[0] | [f][0][1] | f]"
    },
    {
        "in": [
            1,
            2,
            3,
            4
        ],
        "out": [
            [
                1,
                2,
                6,
                24
            ]
        ],
        "q": "def fac: if . == 1 then 1 else . * (. - 1 | fac) end; [.[] | fac]"
    },
    {
        "in": [
            1,
            2,
            4
        ],
        "out": [
            7
        ],
        "q": "reduce .[] as $x (0; . + $x)"
    },
    {
        "in": [
            [
                2,
                {
                    "j": 1
                }
            ],
            [
                5,
                {
                    "j": 3
                }
            ],
            [
                6,
                {
                    "j": 4
                }
            ]
        ],
        "out": [
            5
        ],
        "q": "reduce .[] as [$i, {j:$j}] (0; . + $i - $j)"
    },
    {
        "in": null,
        "out": [
            14
        ],
        "q": "reduce [[1,2,10], [3,4,10]][] as [$i,$j] (0; . + $i * $j)"
    },
    {
        "in": [
            1,
            2,
            3,
            4,
            true,
            false,
            1,
            2,
            3,
            4,
            5
        ],
        "out": [
            true
        ],
        "q": ". as $dot|any($dot[];not)"
    },
    {
        "in": [
            1,
            2,
            3,
            4,
            true
        ],
        "out": [
            false
        ],
        "q": ". as $dot|any($dot[];not)"
    },
    {
        "in": [
            1,
            2,
            3,
            4,
            true,
            false,
            1,
            2,
            3,
            4,
            5
        ],
        "out": [
            false
        ],
        "q": ". as $dot|all($dot[];.)"
    },
    {
        "in": [
            1,
            2,
            3,
            4,
            true
        ],
        "out": [
            true
        ],
        "q": ". as $dot|all($dot[];.)"
    },
    {
        "in": [
            1,
            [
                [],
                {
                    "a": 2
                }
            ]
        ],
        "out": [
            [
                [
                    0
                ],
                [
                    1
                ],
                [
                    1,
                    0
                ],
                [
                    1,
                    1
                ],
                [
                    1,
                    1,
                    "a"
                ]
            ]
        ],
        "q": "[paths]"
    },
    {
        "in": [
            1,
            [
                [],
                {
                    "a": 2
                }
            ]
        ],
        "out": [
            [
                [
                    0
                ],
                [
                    1,
                    1,
                    "a"
                ]
            ]
        ],
        "q": "[leaf_paths]"
    },
    {
        "in": {
            "message": "hello"
        },
        "out": [
            {
                "message": "goodbye"
            }
        ],
        "q": ".message = \"goodbye\""
    },
    {
        "in": {
            "bar": 42
        },
        "out": [
            {
                "bar": 42,
                "foo": 42
            }
        ],
        "q": ".foo = .bar"
    },
    {
        "in": {
            "foo": 42
        },
        "out": [
            {
                "foo": 43
            }
        ],
        "q": ".foo |= .+1"
    },
    {
        "in": [
            1,
            3,
            5
        ],
        "out": [
            [
                3,
                5,
                7
            ],
            [
                2,
                6,
                10
            ],
            [
                -1,
                1,
                3
            ],
            [
                0.5,
                1.5,
                2.5
            ],
            [
                1,
                1,
                1
            ]
        ],
        "q": ".[] += 2, .[] *= 2, .[] -= 2, .[] /= 2, .[] %=2"
    },
    {
        "in": [
            -7,
            -6,
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
        ],
        "out": [
            [
                0,
                -6,
                -5,
                -4,
                -3,
                -2,
                -1,
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                0
            ]
        ],
        "q": "[.[] % 7]"
    },
    {
        "in": {
            "foo": 2
        },
        "out": [
            {
                "foo": 4
            }
        ],
        "q": ".foo += .foo"
    },
    {
        "in": [
            {
                "a": 1,
                "b": 2
            }
        ],
        "out": [
            [
                {
                    "a": {
                        "new": 2,
                        "old": 1
                    },
                    "b": 2
                }
            ]
        ],
        "q": ".[0].a |= {\"old\":., \"new\":(.+1)}"
    },
    {
        "in": [
            4
        ],
        "out": [
            [
                4,
                null,
                [
                    null,
                    null,
                    null,
                    1
                ]
            ]
        ],
        "q": ".[2][3] = 1"
    },
    {
        "in": {
            "bar": 42,
            "foo": [
                11
            ]
        },
        "out": [
            {
                "bar": 42,
                "foo": [
                    11,
                    null,
                    {
                        "bar": 1
                    }
                ]
            }
        ],
        "q": ".foo[2].bar = 1"
    },
    {
        "in": [
            1,
            null,
            null,
            null,
            null,
            null
        ],
        "out": [
            [
                1,
                1,
                1,
                1,
                1,
                1
            ]
        ],
        "q": ".[] = 1"
    },
    {
        "in": [
            {
                "foo": 0
            },
            {
                "foo": 1
            },
            {
                "foo": []
            },
            {
                "foo": true
            },
            {
                "foo": false
            },
            {
                "foo": null
            },
            {
                "foo": "foo"
            },
            {}
        ],
        "out": [
            [
                "yep",
                "yep",
                "yep",
                "yep",
                "nope",
                "nope",
                "yep",
                "nope"
            ]
        ],
        "q": "[.[] | if .foo then \"yep\" else \"nope\" end]"
    },
    {
        "in": [
            {
                "foo": 0
            },
            {
                "foo": 1
            },
            {
                "foo": []
            },
            {
                "foo": true
            },
            {
                "foo": false
            },
            {
                "foo": null
            },
            {
                "foo": "foo"
            },
            {}
        ],
        "out": [
            [
                "yep",
                "yep",
                "yep",
                "yep",
                "nope",
                "nope",
                "yep",
                "nope"
            ]
        ],
        "q": "[.[] | if .baz then \"strange\" elif .foo then \"yep\" else \"nope\" end]"
    },
    {
        "in": null,
        "out": [
            [
                3,
                4,
                3
            ]
        ],
        "q": "[if 1,null,2 then 3 else 4 end]"
    },
    {
        "in": null,
        "out": [
            []
        ],
        "q": "[if empty then 3 else 4 end]"
    },
    {
        "in": null,
        "out": [
            [
                3,
                4
            ]
        ],
        "q": "[if 1 then 3,4 else 5 end]"
    },
    {
        "in": null,
        "out": [
            [
                5,
                6
            ]
        ],
        "q": "[if null then 3 else 5,6 end]"
    },
    {
        "in": [
            {
                "bar": 42,
                "foo": [
                    1,
                    2
                ]
            },
            {
                "bar": null,
                "foo": [
                    1
                ]
            },
            {
                "bar": 18,
                "foo": [
                    null,
                    false,
                    3
                ]
            },
            {
                "bar": 42,
                "foo": []
            },
            {
                "bar": 41,
                "foo": [
                    null,
                    false,
                    null
                ]
            }
        ],
        "out": [
            [
                [
                    1,
                    2
                ],
                [
                    1
                ],
                [
                    3
                ],
                [
                    42
                ],
                [
                    41
                ]
            ]
        ],
        "q": "[.[] | [.foo[] // .bar]]"
    },
    {
        "in": [
            "hello",
            true,
            false,
            [
                false
            ],
            null
        ],
        "out": [
            [
                "hello",
                true,
                "hello",
                [
                    false
                ],
                "hello"
            ]
        ],
        "q": ".[] //= .[0]"
    },
    {
        "in": [
            [
                true,
                []
            ],
            [
                false,
                1
            ],
            [
                42,
                null
            ],
            [
                null,
                false
            ]
        ],
        "out": [
            [
                true,
                true
            ],
            [
                false,
                true
            ],
            [
                false,
                true
            ],
            [
                false,
                false
            ]
        ],
        "q": ".[] | [.[0] and .[1], .[0] or .[1]]"
    },
    {
        "in": [
            1,
            0,
            false,
            null,
            true,
            "hello"
        ],
        "out": [
            [
                false,
                false,
                true,
                true,
                false,
                false
            ]
        ],
        "q": "[.[] | not]"
    },
    {
        "in": {},
        "out": [
            [
                true,
                false,
                false,
                false,
                false,
                true
            ]
        ],
        "q": "[10 > 0, 10 > 10, 10 > 20, 10 < 0, 10 < 10, 10 < 20]"
    },
    {
        "in": {},
        "out": [
            [
                true,
                true,
                false,
                false,
                true,
                true
            ]
        ],
        "q": "[10 >= 0, 10 >= 10, 10 >= 20, 10 <= 0, 10 <= 10, 10 <= 20]"
    },
    {
        "in": {},
        "out": [
            [
                true,
                false,
                true,
                false
            ]
        ],
        "q": "[ 10 == 10, 10 != 10, 10 != 11, 10 == 11]"
    },
    {
        "in": {},
        "out": [
            [
                true,
                false,
                false,
                true
            ]
        ],
        "q": "[\"hello\" == \"hello\", \"hello\" != \"hello\", \"hello\" == \"world\", \"hello\" != \"world\" ]"
    },
    {
        "in": {},
        "out": [
            [
                true,
                false,
                false,
                true
            ]
        ],
        "q": "[[1,2,3] == [1,2,3], [1,2,3] != [1,2,3], [1,2,3] == [4,5,6], [1,2,3] != [4,5,6]]"
    },
    {
        "in": {},
        "out": [
            [
                true,
                false,
                true,
                false
            ]
        ],
        "q": "[{\"foo\":42} == {\"foo\":42},{\"foo\":42} != {\"foo\":42}, {\"foo\":42} != {\"bar\":42}, {\"foo\":42} == {\"bar\":42}]"
    },
    {
        "in": {},
        "out": [
            [
                true,
                false
            ]
        ],
        "q": "[{\"foo\":[1,2,{\"bar\":18},\"world\"]} == {\"foo\":[1,2,{\"bar\":18},\"world\"]},{\"foo\":[1,2,{\"bar\":18},\"world\"]} == {\"foo\":[1,2,{\"bar\":19},\"world\"]}]"
    },
    {
        "in": {},
        "out": [
            [
                true,
                true,
                false
            ]
        ],
        "q": "[(\"foo\" | contains(\"foo\")), (\"foobar\" | contains(\"foo\")), (\"foo\" | contains(\"foobar\"))]"
    },
    {
        "in": [
            0,
            1,
            2,
            3
        ],
        "out": [
            [
                "foo",
                "Cannot index number with string \"a\"",
                3
            ]
        ],
        "q": "[.[]|try if . == 0 then error(\"foo\") elif . == 1 then .a elif . == 2 then empty else . end catch .]"
    },
    {
        "in": [
            null,
            true,
            {
                "a": 1
            }
        ],
        "out": [
            [
                null,
                null,
                1,
                1
            ]
        ],
        "q": "[.[]|(.a, .a)?]"
    },
    {
        "in": [
            "fo",
            "foo",
            "barfoo",
            "foobar",
            "barfoob"
        ],
        "out": [
            [
                false,
                true,
                false,
                true,
                false
            ]
        ],
        "q": "[.[]|startswith(\"foo\")]"
    },
    {
        "in": [
            "fo",
            "foo",
            "barfoo",
            "foobar",
            "barfoob"
        ],
        "out": [
            [
                false,
                true,
                true,
                false,
                false
            ]
        ],
        "q": "[.[]|endswith(\"foo\")]"
    },
    {
        "in": [
            "a,b, c, d, e,f",
            ", a,b, c, d, e,f, "
        ],
        "out": [
            [
                [
                    "a,b",
                    "c",
                    "d",
                    "e,f"
                ],
                [
                    "",
                    "a,b",
                    "c",
                    "d",
                    "e,f",
                    ""
                ]
            ]
        ],
        "q": "[.[] | split(\", \")]"
    },
    {
        "in": "abc",
        "out": [
            [
                "a",
                "b",
                "c"
            ]
        ],
        "q": "split(\"\")"
    },
    {
        "in": [
            "fo",
            "foo",
            "barfoo",
            "foobar",
            "afoo"
        ],
        "out": [
            [
                "fo",
                "",
                "barfoo",
                "bar",
                "afoo"
            ]
        ],
        "q": "[.[]|ltrimstr(\"foo\")]"
    },
    {
        "in": [
            "fo",
            "foo",
            "barfoo",
            "foobar",
            "foob"
        ],
        "out": [
            [
                "fo",
                "",
                "bar",
                "foobar",
                "foob"
            ]
        ],
        "q": "[.[]|rtrimstr(\"foo\")]"
    },
    {
        "in": "a,bc,def,ghij,klmno",
        "out": [
            [
                1,
                13,
                [
                    1,
                    4,
                    8,
                    13
                ]
            ]
        ],
        "q": "[(index(\",\"), rindex(\",\")), indices(\",\")]"
    },
    {
        "in": [
            0,
            1,
            1,
            2,
            3,
            4,
            1,
            5
        ],
        "out": [
            [
                1,
                2,
                6
            ]
        ],
        "q": "indices(1)"
    },
    {
        "in": [
            0,
            1,
            2,
            3,
            1,
            4,
            2,
            5,
            1,
            2,
            6,
            7
        ],
        "out": [
            [
                1,
                8
            ]
        ],
        "q": "indices([1,2])"
    },
    {
        "in": [
            1
        ],
        "out": [
            []
        ],
        "q": "indices([1,2])"
    },
    {
        "in": "a,b, cd,e, fgh, ijkl",
        "out": [
            [
                3,
                9,
                14
            ]
        ],
        "q": "indices(\", \")"
    },
    {
        "in": [
            "a, bc, def, ghij, jklmn, a,b, c,d, e,f",
            "a,b,c,d, e,f,g,h"
        ],
        "out": [
            [
                [
                    "a",
                    " bc",
                    " def",
                    " ghij",
                    " jklmn",
                    " a",
                    "b",
                    " c",
                    "d",
                    " e",
                    "f"
                ],
                [
                    "a",
                    "b",
                    "c",
                    "d",
                    " e",
                    "f",
                    "g",
                    "h"
                ]
            ]
        ],
        "q": "[.[]|split(\",\")]"
    },
    {
        "in": [
            "a, bc, def, ghij, jklmn, a,b, c,d, e,f",
            "a,b,c,d, e,f,g,h"
        ],
        "out": [
            [
                [
                    "a",
                    "bc",
                    "def",
                    "ghij",
                    "jklmn",
                    "a,b",
                    "c,d",
                    "e,f"
                ],
                [
                    "a,b,c,d",
                    "e,f,g,h"
                ]
            ]
        ],
        "q": "[.[]|split(\", \")]"
    },
    {
        "in": [
            "a",
            "ab",
            "abc"
        ],
        "out": [
            [
                "aaa",
                "ababab",
                "abcabcabc"
            ]
        ],
        "q": "[.[] * 3]"
    },
    {
        "in": [
            "a, bc, def, ghij, jklmn, a,b, c,d, e,f",
            "a,b,c,d, e,f,g,h"
        ],
        "out": [
            [
                [
                    "a",
                    " bc",
                    " def",
                    " ghij",
                    " jklmn",
                    " a",
                    "b",
                    " c",
                    "d",
                    " e",
                    "f"
                ],
                [
                    "a",
                    "b",
                    "c",
                    "d",
                    " e",
                    "f",
                    "g",
                    "h"
                ]
            ]
        ],
        "q": "[.[] / \",\"]"
    },
    {
        "in": [
            "a, bc, def, ghij, jklmn, a,b, c,d, e,f",
            "a,b,c,d, e,f,g,h"
        ],
        "out": [
            [
                [
                    "a",
                    "bc",
                    "def",
                    "ghij",
                    "jklmn",
                    "a,b",
                    "c,d",
                    "e,f"
                ],
                [
                    "a,b,c,d",
                    "e,f,g,h"
                ]
            ]
        ],
        "q": "[.[] / \", \"]"
    },
    {
        "in": [
            [
                [],
                []
            ],
            [
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    2
                ]
            ],
            [
                [
                    1,
                    2,
                    3
                ],
                [
                    3,
                    1
                ]
            ],
            [
                [
                    1,
                    2,
                    3
                ],
                [
                    4
                ]
            ],
            [
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    4
                ]
            ]
        ],
        "out": [
            [
                true,
                true,
                true,
                false,
                false
            ]
        ],
        "q": "map(.[1] as $needle | .[0] | contains($needle))"
    },
    {
        "in": [
            [
                [
                    "foobar",
                    "foobaz"
                ],
                [
                    "baz",
                    "bar"
                ]
            ],
            [
                [
                    "foobar",
                    "foobaz"
                ],
                [
                    "foo"
                ]
            ],
            [
                [
                    "foobar",
                    "foobaz"
                ],
                [
                    "blap"
                ]
            ]
        ],
        "out": [
            [
                true,
                true,
                false
            ]
        ],
        "q": "map(.[1] as $needle | .[0] | contains($needle))"
    },
    {
        "in": {},
        "out": [
            [
                true,
                true,
                false
            ]
        ],
        "q": "[({foo: 12, bar:13} | contains({foo: 12})), ({foo: 12} | contains({})), ({foo: 12, bar:13} | contains({baz:14}))]"
    },
    {
        "in": {},
        "out": [
            true
        ],
        "q": "{foo: {baz: 12, blap: {bar: 13}}, bar: 14} | contains({bar: 14, foo: {blap: {}}})"
    },
    {
        "in": {},
        "out": [
            false
        ],
        "q": "{foo: {baz: 12, blap: {bar: 13}}, bar: 14} | contains({bar: 14, foo: {blap: {bar: 14}}})"
    },
    {
        "in": [
            42,
            [
                2,
                5,
                3,
                11
            ],
            10,
            {
                "a": 42,
                "b": 2
            },
            {
                "a": 42
            },
            true,
            2,
            [
                2,
                6
            ],
            "hello",
            null,
            [
                2,
                5,
                6
            ],
            {
                "a": [],
                "b": 1
            },
            "abc",
            "ab",
            [
                3,
                10
            ],
            {},
            false,
            "abcd",
            null
        ],
        "out": [
            [
                null,
                null,
                false,
                true,
                2,
                10,
                42,
                "ab",
                "abc",
                "abcd",
                "hello",
                [
                    2,
                    5,
                    3,
                    11
                ],
                [
                    2,
                    5,
                    6
                ],
                [
                    2,
                    6
                ],
                [
                    3,
                    10
                ],
                {},
                {
                    "a": 42
                },
                {
                    "a": 42,
                    "b": 2
                },
                {
                    "a": [],
                    "b": 1
                }
            ]
        ],
        "q": "sort"
    },
    {
        "in": [
            {
                "a": 1,
                "b": 4,
                "c": 14
            },
            {
                "a": 4,
                "b": 1,
                "c": 3
            },
            {
                "a": 1,
                "b": 4,
                "c": 3
            },
            {
                "a": 0,
                "b": 2,
                "c": 43
            }
        ],
        "out": [
            [
                {
                    "a": 0,
                    "b": 2,
                    "c": 43
                },
                {
                    "a": 1,
                    "b": 4,
                    "c": 14
                },
                {
                    "a": 1,
                    "b": 4,
                    "c": 3
                },
                {
                    "a": 4,
                    "b": 1,
                    "c": 3
                }
            ],
            [
                {
                    "a": 0,
                    "b": 2,
                    "c": 43
                },
                {
                    "a": 1,
                    "b": 4,
                    "c": 14
                },
                {
                    "a": 1,
                    "b": 4,
                    "c": 3
                },
                {
                    "a": 4,
                    "b": 1,
                    "c": 3
                }
            ],
            [
                {
                    "a": 4,
                    "b": 1,
                    "c": 3
                },
                {
                    "a": 0,
                    "b": 2,
                    "c": 43
                },
                {
                    "a": 1,
                    "b": 4,
                    "c": 3
                },
                {
                    "a": 1,
                    "b": 4,
                    "c": 14
                }
            ],
            [
                [
                    {
                        "a": 4,
                        "b": 1,
                        "c": 3
                    }
                ],
                [
                    {
                        "a": 0,
                        "b": 2,
                        "c": 43
                    }
                ],
                [
                    {
                        "a": 1,
                        "b": 4,
                        "c": 14
                    },
                    {
                        "a": 1,
                        "b": 4,
                        "c": 3
                    }
                ]
            ],
            [
                [
                    {
                        "a": 1,
                        "b": 4,
                        "c": 14
                    },
                    {
                        "a": 0,
                        "b": 2,
                        "c": 43
                    }
                ],
                [
                    {
                        "a": 4,
                        "b": 1,
                        "c": 3
                    },
                    {
                        "a": 1,
                        "b": 4,
                        "c": 3
                    }
                ]
            ]
        ],
        "q": "(sort_by(.b) | sort_by(.a)), sort_by(.a, .b), sort_by(.b, .c), group_by(.b), group_by(.a + .b - .c == 2)"
    },
    {
        "in": [
            1,
            2,
            5,
            3,
            5,
            3,
            1,
            3
        ],
        "out": [
            [
                1,
                2,
                3,
                5
            ]
        ],
        "q": "unique"
    },
    {
        "in": [],
        "out": [
            []
        ],
        "q": "unique"
    },
    {
        "in": [
            [
                4,
                2,
                "a"
            ],
            [
                3,
                1,
                "a"
            ],
            [
                2,
                4,
                "a"
            ],
            [
                1,
                3,
                "a"
            ]
        ],
        "out": [
            [
                [
                    1,
                    3,
                    "a"
                ],
                [
                    4,
                    2,
                    "a"
                ],
                [
                    3,
                    1,
                    "a"
                ],
                [
                    2,
                    4,
                    "a"
                ],
                [
                    4,
                    2,
                    "a"
                ],
                [
                    1,
                    3,
                    "a"
                ]
            ]
        ],
        "q": "[min, max, min_by(.[1]), max_by(.[1]), min_by(.[2]), max_by(.[2])]"
    },
    {
        "in": [],
        "out": [
            [
                null,
                null,
                null,
                null
            ]
        ],
        "q": "[min,max,min_by(.),max_by(.)]"
    },
    {
        "in": {
            "baz": "bar",
            "foo": {
                "bar": 4
            }
        },
        "out": [
            4
        ],
        "q": ".foo[.baz]"
    },
    {
        "in": [
            {
                "error": true
            }
        ],
        "out": [
            {
                "error": "no, it's OK"
            }
        ],
        "q": ".[] | .error = \"no, it's OK\""
    },
    {
        "in": null,
        "out": [
            {
                "a": 999
            }
        ],
        "q": "[{a:1}] | .[] | .a=999"
    },
    {
        "in": {
            "a": 1,
            "b": 2
        },
        "out": [
            [
                {
                    "key": "a",
                    "value": 1
                },
                {
                    "key": "b",
                    "value": 2
                }
            ]
        ],
        "q": "to_entries"
    },
    {
        "in": [
            "a",
            "b"
        ],
        "out": [
            [
                {
                    "key": 0,
                    "value": "a"
                },
                {
                    "key": 1,
                    "value": "b"
                }
            ]
        ],
        "q": "to_entries"
    },
    {
        "in": [
            {
                "key": "a",
                "value": 1
            },
            {
                "Key": "b",
                "Value": 2
            },
            {
                "name": "c",
                "value": 3
            },
            {
                "Name": "d",
                "Value": 4
            }
        ],
        "out": [
            {
                "a": 1,
                "b": 2,
                "c": 3,
                "d": 4
            }
        ],
        "q": "from_entries"
    },
    {
        "in": {
            "a": 1,
            "b": 2
        },
        "out": [
            {
                "KEY_a": 1,
                "KEY_b": 2
            }
        ],
        "q": "with_entries(.key |= \"KEY_\" + .)"
    },
    {
        "in": [
            {
                "foo": 42
            },
            {}
        ],
        "out": [
            [
                true,
                false
            ]
        ],
        "q": "map(has(\"foo\"))"
    },
    {
        "in": [
            [
                0,
                1
            ],
            [
                "a",
                "b",
                "c"
            ]
        ],
        "out": [
            [
                false,
                true
            ]
        ],
        "q": "map(has(2))"
    },
    {
        "in": [
            42,
            3,
            35
        ],
        "out": [
            [
                0,
                1,
                2
            ]
        ],
        "q": "keys"
    },
    {
        "in": 1000000000000000000,
        "out": [
            null
        ],
        "q": "[][.]"
    },
    {
        "in": [
            -1,
            1,
            2,
            3,
            1000000000000000000
        ],
        "out": [
            [
                [
                    1
                ],
                [
                    1
                ],
                [
                    1,
                    2
                ],
                [
                    1,
                    2
                ],
                [
                    1,
                    2
                ]
            ]
        ],
        "q": "map([1,2][0:.])"
    },
    {
        "in": {
            "k": {
                "a": 0,
                "c": 3
            }
        },
        "out": [
            {
                "k": {
                    "a": 0,
                    "b": 2,
                    "c": 3
                }
            }
        ],
        "q": "{\"k\": {\"a\": 1, \"b\": 2}} * ."
    },
    {
        "in": {
            "hello": 1,
            "k": {
                "a": 0,
                "c": 3
            }
        },
        "out": [
            {
                "hello": 1,
                "k": {
                    "a": 0,
                    "b": 2,
                    "c": 3
                }
            }
        ],
        "q": "{\"k\": {\"a\": 1, \"b\": 2}, \"hello\": {\"x\": 1}} * ."
    },
    {
        "in": {
            "hello": {
                "x": 1
            },
            "k": {
                "a": 0,
                "c": 3
            }
        },
        "out": [
            {
                "hello": {
                    "x": 1
                },
                "k": {
                    "a": 0,
                    "b": 2,
                    "c": 3
                }
            }
        ],
        "q": "{\"k\": {\"a\": 1, \"b\": 2}, \"hello\": 1} * ."
    },
    {
        "in": {
            "a": {
                "b": 2
            },
            "c": {
                "d": 3,
                "f": 9
            }
        },
        "out": [
            {
                "a": {
                    "b": 2
                },
                "c": {
                    "d": 3,
                    "f": 9
                },
                "e": 5
            }
        ],
        "q": "{\"a\": {\"b\": 1}, \"c\": {\"d\": 2}, \"e\": 5} * ."
    },
    {
        "in": [
            1,
            2,
            "foo",
            [],
            [
                3,
                []
            ],
            {},
            true,
            false,
            null
        ],
        "out": [
            [
                [],
                [
                    3,
                    []
                ]
            ]
        ],
        "q": "[.[]|arrays]"
    },
    {
        "in": [
            1,
            2,
            "foo",
            [],
            [
                3,
                []
            ],
            {},
            true,
            false,
            null
        ],
        "out": [
            [
                {}
            ]
        ],
        "q": "[.[]|objects]"
    },
    {
        "in": [
            1,
            2,
            "foo",
            [],
            [
                3,
                []
            ],
            {},
            true,
            false,
            null
        ],
        "out": [
            [
                [],
                [
                    3,
                    []
                ],
                {}
            ]
        ],
        "q": "[.[]|iterables]"
    },
    {
        "in": [
            1,
            2,
            "foo",
            [],
            [
                3,
                []
            ],
            {},
            true,
            false,
            null
        ],
        "out": [
            [
                1,
                2,
                "foo",
                true,
                false,
                null
            ]
        ],
        "q": "[.[]|scalars]"
    },
    {
        "in": [
            1,
            2,
            "foo",
            [],
            [
                3,
                []
            ],
            {},
            true,
            false,
            null
        ],
        "out": [
            [
                1,
                2,
                "foo",
                [],
                [
                    3,
                    []
                ],
                {},
                true,
                false
            ]
        ],
        "q": "[.[]|values]"
    },
    {
        "in": [
            1,
            2,
            "foo",
            [],
            [
                3,
                []
            ],
            {},
            true,
            false,
            null
        ],
        "out": [
            [
                true,
                false
            ]
        ],
        "q": "[.[]|booleans]"
    },
    {
        "in": [
            1,
            2,
            "foo",
            [],
            [
                3,
                []
            ],
            {},
            true,
            false,
            null
        ],
        "out": [
            [
                null
            ]
        ],
        "q": "[.[]|nulls]"
    },
    {
        "in": [
            0,
            [
                1
            ],
            [
                [
                    2
                ]
            ],
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ],
        "out": [
            [
                0,
                1,
                2,
                3
            ]
        ],
        "q": "flatten"
    },
    {
        "in": [
            0,
            [
                1
            ],
            [
                [
                    2
                ]
            ],
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ],
        "out": [
            [
                0,
                [
                    1
                ],
                [
                    [
                        2
                    ]
                ],
                [
                    [
                        [
                            3
                        ]
                    ]
                ]
            ]
        ],
        "q": "flatten(0)"
    },
    {
        "in": [
            0,
            [
                1
            ],
            [
                [
                    2
                ]
            ],
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ],
        "out": [
            [
                0,
                1,
                2,
                [
                    3
                ]
            ]
        ],
        "q": "flatten(2)"
    },
    {
        "in": [
            0,
            [
                1,
                [
                    2
                ]
            ],
            [
                1,
                [
                    [
                        3
                    ],
                    2
                ]
            ]
        ],
        "out": [
            [
                0,
                1,
                2,
                1,
                [
                    3
                ],
                2
            ]
        ],
        "q": "flatten(2)"
    },
    {
        "in": [
            0,
            [
                1
            ],
            [
                [
                    2
                ]
            ],
            [
                [
                    [
                        3
                    ]
                ]
            ]
        ],
        "out": [
            "flatten depth must not be negative"
        ],
        "q": "try flatten(-1) catch ."
    },
    {
        "in": [
            [
                1
            ],
            [
                2,
                3
            ]
        ],
        "out": [
            [
                [
                    1,
                    2
                ],
                [
                    null,
                    3
                ]
            ]
        ],
        "q": "transpose"
    },
    {
        "in": "useful but not for \u00e9",
        "out": [
            "USEFUL BUT NOT FOR \u00e9"
        ],
        "q": "ascii_upcase"
    },
    {
        "in": "very-long-string",
        "out": [
            "string (\"very-long-...) cannot be negated"
        ],
        "q": "try -. catch ."
    },
    {
        "in": [
            "1",
            2,
            true,
            false,
            3.4
        ],
        "out": [
            "1,2,true,false,3.4"
        ],
        "q": "join(\",\")"
    },
    {
        "in": [
            [],
            [
                null
            ],
            [
                null,
                null
            ],
            [
                null,
                null,
                null
            ]
        ],
        "out": [
            "",
            "",
            ",",
            ",,"
        ],
        "q": ".[] | join(\",\")"
    },
    {
        "in": [
            [
                "a",
                null
            ],
            [
                null,
                "a"
            ]
        ],
        "out": [
            "a,",
            ",a"
        ],
        "q": ".[] | join(\",\")"
    },
    {
        "in": [
            "1",
            "2",
            {
                "a": {
                    "b": {
                        "c": 33
                    }
                }
            }
        ],
        "out": [
            "string (\"1,2,\") and object ({\"a\":{\"b\":{...) cannot be added"
        ],
        "q": "try join(\",\") catch ."
    },
    {
        "in": [
            "1",
            "2",
            [
                3,
                4,
                5
            ]
        ],
        "out": [
            "string (\"1,2,\") and array ([3,4,5]) cannot be added"
        ],
        "q": "try join(\",\") catch ."
    },
    {
        "in": null,
        "out": [
            {
                "and": 1,
                "as": 7,
                "catch": 12,
                "def": 8,
                "elif": 5,
                "else": 4,
                "end": 6,
                "foreach": 10,
                "if": 0,
                "import": 14,
                "include": 15,
                "label": 13,
                "module": 16,
                "or": 2,
                "reduce": 9,
                "then": 3,
                "try": 11
            }
        ],
        "q": "{if:0,and:1,or:2,then:3,else:4,elif:5,end:6,as:7,def:8,reduce:9,foreach:10,try:11,catch:12,label:13,import:14,include:15,module:16}"
    },
    {
        "in": 0,
        "out": [
            "number (1) and number (0) cannot be divided because the divisor is zero"
        ],
        "q": "try (1/.) catch ."
    },
    {
        "in": 0,
        "out": [
            "number (1) and number (0) cannot be divided (remainder) because the divisor is zero"
        ],
        "q": "try (1%.) catch ."
    },
    {
        "in": null,
        "out": [
            true
        ],
        "q": "[range(-52;52;1)] as $powers | [$powers[]|pow(2;.)|log2] == $powers"
    },
    {
        "in": null,
        "out": [],
        "q": "[range(-99/2;99/2;1)] as $orig | [$orig[]|pow(2;.)|log2] as $back | ($orig|keys)[]|. as $k | (($orig|.[$k])-($back|.[$k]))|if . < 0 then . * -1 else . end|select(.>.00005)"
    }
]