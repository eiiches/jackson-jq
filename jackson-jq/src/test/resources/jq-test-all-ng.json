[
    {
        "q": "[(label $here | .[] | if .>1 then break $here else . end), \"hi!\"]", 
        "out": [
            [
                0, 
                1, 
                "hi!"
            ]
        ], 
        "in": [
            0, 
            1, 
            2
        ]
    }, 
    {
        "q": "[(label $here | .[] | if .>1 then break $here else . end), \"hi!\"]", 
        "out": [
            [
                0, 
                "hi!"
            ]
        ], 
        "in": [
            0, 
            2, 
            1
        ]
    }, 
    {
        "q": "[label $out | foreach .[] as $item ([3, null]; if .[0] < 1 then break $out else [.[0] -1, $item] end; .[1])]", 
        "out": [
            [
                11, 
                22, 
                33
            ]
        ], 
        "in": [
            11, 
            22, 
            33, 
            44, 
            55, 
            66, 
            77, 
            88, 
            99
        ]
    }, 
    {
        "q": "[foreach .[] as [$i, $j] (0; . + $i - $j)]", 
        "out": [
            [
                1, 
                3, 
                5
            ]
        ], 
        "in": [
            [
                2, 
                1
            ], 
            [
                5, 
                3
            ], 
            [
                6, 
                4
            ]
        ]
    }, 
    {
        "q": "[foreach .[] as {a:$a} (0; . + $a; -.)]", 
        "out": [
            [
                -1, 
                -1, 
                -4
            ]
        ], 
        "in": [
            {
                "a": 1
            }, 
            {
                "b": 2
            }, 
            {
                "a": 3, 
                "b": 4
            }
        ]
    }, 
    {
        "q": "del(.[2:4],.[0],.[-2:])", 
        "out": [
            [
                1, 
                4, 
                5
            ]
        ], 
        "in": [
            0, 
            1, 
            2, 
            3, 
            4, 
            5, 
            6, 
            7
        ]
    }, 
    {
        "q": "[1, {c:3, d:4}] as [$a, {c:$b, b:$c}] | $a, $b, $c", 
        "out": [
            1, 
            3, 
            null
        ], 
        "in": null
    }, 
    {
        "q": ". as {as: $kw, \"str\": $str, (\"e\"+\"x\"+\"p\"): $exp} | [$kw, $str, $exp]", 
        "out": [
            [
                1, 
                2, 
                3
            ]
        ], 
        "in": {
            "as": 1, 
            "exp": 3, 
            "str": 2
        }
    }, 
    {
        "q": ".[] as [$a, $b] | [$b, $a]", 
        "out": [
            [
                null, 
                1
            ], 
            [
                2, 
                1
            ]
        ], 
        "in": [
            [
                1
            ], 
            [
                1, 
                2, 
                3
            ]
        ]
    }, 
    {
        "q": ". as $i | . as [$i] | $i", 
        "out": [
            0
        ], 
        "in": [
            0
        ]
    }, 
    {
        "q": ". as [$i] | . as $i | $i", 
        "out": [
            [
                0
            ]
        ], 
        "in": [
            0
        ]
    }, 
    {
        "q": "map_values(.+1)", 
        "out": [
            [
                1, 
                2, 
                3
            ]
        ], 
        "in": [
            0, 
            1, 
            2
        ]
    }, 
    {
        "q": "def f: .+1; def g: f; def f: .+100; def f(a):a+.+11; [(g|f(20)), f]", 
        "out": [
            [
                33, 
                101
            ]
        ], 
        "in": 1
    }, 
    {
        "q": "reduce .[] as [$i, {j:$j}] (0; . + $i - $j)", 
        "out": [
            5
        ], 
        "in": [
            [
                2, 
                {
                    "j": 1
                }
            ], 
            [
                5, 
                {
                    "j": 3
                }
            ], 
            [
                6, 
                {
                    "j": 4
                }
            ]
        ]
    }, 
    {
        "q": "reduce [[1,2,10], [3,4,10]][] as [$i,$j] (0; . + $i * $j)", 
        "out": [
            14
        ], 
        "in": null
    }, 
    {
        "q": "path(.foo[0,1])", 
        "out": [
            [
                "foo", 
                0
            ], 
            [
                "foo", 
                1
            ]
        ], 
        "in": null
    }, 
    {
        "q": "path(.[] | select(.>3))", 
        "out": [
            [
                1
            ]
        ], 
        "in": [
            1, 
            5, 
            3
        ]
    }, 
    {
        "q": "path(.)", 
        "out": [
            []
        ], 
        "in": 42
    }, 
    {
        "q": "[\"foo\",1] as $p | getpath($p), setpath($p; 20), delpaths([$p])", 
        "out": [
            "b", 
            {
                "foo": [
                    "a", 
                    20, 
                    "c", 
                    "d"
                ], 
                "bar": 42
            }, 
            {
                "foo": [
                    "a", 
                    "c", 
                    "d"
                ], 
                "bar": 42
            }
        ], 
        "in": {
            "foo": [
                "a", 
                "b", 
                "c", 
                "d"
            ], 
            "bar": 42
        }
    }, 
    {
        "q": "map(getpath([2])), map(setpath([2]; 42)), map(delpaths([[2]]))", 
        "out": [
            [
                null, 
                null, 
                2
            ], 
            [
                [
                    0, 
                    null, 
                    42
                ], 
                [
                    0, 
                    1, 
                    42
                ], 
                [
                    0, 
                    1, 
                    42
                ]
            ], 
            [
                [
                    0
                ], 
                [
                    0, 
                    1
                ], 
                [
                    0, 
                    1
                ]
            ]
        ], 
        "in": [
            [
                0
            ], 
            [
                0, 
                1
            ], 
            [
                0, 
                1, 
                2
            ]
        ]
    }, 
    {
        "q": "map(delpaths([[0,\"foo\"]]))", 
        "out": [
            [
                [
                    {
                        "x": 1
                    }
                ], 
                [
                    {
                        "bar": 2
                    }
                ]
            ]
        ], 
        "in": [
            [
                {
                    "x": 1, 
                    "foo": 2
                }
            ], 
            [
                {
                    "bar": 2
                }
            ]
        ]
    }, 
    {
        "q": "[\"foo\",1] as $p | getpath($p), setpath($p; 20), delpaths([$p])", 
        "out": [
            null, 
            {
                "foo": [
                    null, 
                    20
                ], 
                "bar": false
            }, 
            {
                "bar": false
            }
        ], 
        "in": {
            "bar": false
        }
    }, 
    {
        "q": "delpaths([[-200]])", 
        "out": [
            [
                1, 
                2, 
                3
            ]
        ], 
        "in": [
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "del(.), del(empty), del((.foo,.bar,.baz) | .[2,3,0]), del(.foo[0], .bar[0], .foo, .baz.bar[0].x)", 
        "out": [
            null, 
            {
                "foo": [
                    0, 
                    1, 
                    2, 
                    3, 
                    4
                ], 
                "bar": [
                    0, 
                    1
                ]
            }, 
            {
                "foo": [
                    1, 
                    4
                ], 
                "bar": [
                    1
                ]
            }, 
            {
                "bar": [
                    1
                ]
            }
        ], 
        "in": {
            "foo": [
                0, 
                1, 
                2, 
                3, 
                4
            ], 
            "bar": [
                0, 
                1
            ]
        }
    }, 
    {
        "q": "def inc(x): x |= .+1; inc(.[].a)", 
        "out": [
            [
                {
                    "a": 2, 
                    "b": 2
                }, 
                {
                    "a": 3, 
                    "b": 4
                }, 
                {
                    "a": 8, 
                    "b": 8
                }
            ]
        ], 
        "in": [
            {
                "a": 1, 
                "b": 2
            }, 
            {
                "a": 2, 
                "b": 4
            }, 
            {
                "a": 7, 
                "b": 8
            }
        ]
    }, 
    {
        "q": "[.[]|(.a, .a)?]", 
        "out": [
            [
                null, 
                null, 
                1, 
                1
            ]
        ], 
        "in": [
            null, 
            true, 
            {
                "a": 1
            }
        ]
    }, 
    {
        "q": "[[.[]|[.a,.a]]?]", 
        "out": [
            []
        ], 
        "in": [
            null, 
            true, 
            {
                "a": 1
            }
        ]
    }, 
    {
        "q": "try error(\"\\($__loc__)\") catch .", 
        "out": [
            "{\"file\":\"<top-level>\",\"line\":1}"
        ], 
        "in": null
    }, 
    {
        "q": "bsearch(4)", 
        "out": [
            -4
        ], 
        "in": [
            1, 
            2, 
            3
        ]
    }, 
    {
        "q": "[strptime(\"%Y-%m-%dT%H:%M:%SZ\")|(.,mktime)]", 
        "out": [
            [
                [
                    2015, 
                    2, 
                    5, 
                    23, 
                    51, 
                    47, 
                    4, 
                    63
                ], 
                1425599507
            ]
        ], 
        "in": "2015-03-05T23:51:47Z"
    }, 
    {
        "q": "strftime(\"%Y-%m-%dT%H:%M:%SZ\")", 
        "out": [
            "2015-03-05T23:51:47Z"
        ], 
        "in": [
            2015, 
            2, 
            5, 
            23, 
            51, 
            47, 
            4, 
            63
        ]
    }, 
    {
        "q": "gmtime", 
        "out": [
            [
                2015, 
                2, 
                5, 
                23, 
                51, 
                47, 
                4, 
                63
            ]
        ], 
        "in": 1425599507
    }, 
    {
        "q": "import \"a\" as foo; import \"b\" as bar; def fooa: foo::a; [fooa, bar::a, bar::b, foo::a]", 
        "out": [
            [
                "a", 
                "b", 
                "c", 
                "a"
            ]
        ], 
        "in": null
    }, 
    {
        "q": "import \"c\" as foo; [foo::a, foo::c]", 
        "out": [
            [
                0, 
                "acmehbah"
            ]
        ], 
        "in": null
    }, 
    {
        "q": "modulemeta", 
        "out": [
            {
                "deps": [
                    {
                        "is_data": false, 
                        "as": "foo", 
                        "relpath": "a"
                    }, 
                    {
                        "is_data": false, 
                        "search": "./", 
                        "as": "d", 
                        "relpath": "d"
                    }, 
                    {
                        "is_data": false, 
                        "search": "./", 
                        "as": "d2", 
                        "relpath": "d"
                    }, 
                    {
                        "is_data": false, 
                        "search": "./../lib/jq", 
                        "as": "e", 
                        "relpath": "e"
                    }, 
                    {
                        "is_data": false, 
                        "search": "./../lib/jq", 
                        "as": "f", 
                        "relpath": "f"
                    }, 
                    {
                        "is_data": true, 
                        "as": "d", 
                        "relpath": "data"
                    }
                ], 
                "whatever": null
            }
        ], 
        "in": "c"
    }, 
    {
        "q": "import \"test_bind_order\" as check; check::check", 
        "out": [
            true
        ], 
        "in": null
    }
]